
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000d96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800200  00800200  00000e2a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000e40  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f35  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d0  00000000  00000000  00001dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ef  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000677  00000000  00000000  00002a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000308e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 33       	cpi	r26, 0x3E	; 62
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 ab 04 	call	0x956	; 0x956 <main>
 108:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_set_4bit+0x4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_set_4bit+0xa>
 11a:	00 00       	nop

//Function to Reset LCD
void lcd_set_4bit(void) {
    _delay_ms(1);
    
    cbit(PORTA, RS); //RS=0 --- Command Input
 11c:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW); //RW=0 --- Writing to LCD
 11e:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30; //Sending 3
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA, EN); //Set Enable Pin
 124:	17 9a       	sbi	0x02, 7	; 2
 126:	8f e1       	ldi	r24, 0x1F	; 31
 128:	9e e4       	ldi	r25, 0x4E	; 78
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_set_4bit+0x1a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_set_4bit+0x20>
 130:	00 00       	nop
    _delay_ms(5);    //Delay
    cbit(PORTA, EN); //Clear Enable Pin
 132:	17 98       	cbi	0x02, 7	; 2
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_set_4bit+0x28>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_set_4bit+0x2e>
 13e:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA, RS); //RS=0 --- Command Input
 140:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW); //RW=0 --- Writing to LCD
 142:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30; //Sending 3
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA, EN); //Set Enable Pin
 148:	17 9a       	sbi	0x02, 7	; 2
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x3e>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_set_4bit+0x44>
 154:	00 00       	nop
    _delay_ms(5);    //Delay
    cbit(PORTA, EN); //Clear Enable Pin
 156:	17 98       	cbi	0x02, 7	; 2
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_set_4bit+0x4c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_set_4bit+0x52>
 162:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA, RS); //RS=0 --- Command Input
 164:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW); //RW=0 --- Writing to LCD
 166:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x30; //Sending 3
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA, EN); //Set Enable Pin
 16c:	17 9a       	sbi	0x02, 7	; 2
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_set_4bit+0x62>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_set_4bit+0x68>
 178:	00 00       	nop
    _delay_ms(5);    //Delay
    cbit(PORTA, EN); //Clear Enable Pin
 17a:	17 98       	cbi	0x02, 7	; 2
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x70>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_set_4bit+0x76>
 186:	00 00       	nop
    
    _delay_ms(1);
    
    cbit(PORTA, RS); //RS=0 --- Command Input
 188:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW); //RW=0 --- Writing to LCD
 18a:	15 98       	cbi	0x02, 5	; 2
    lcd_port = 0x20; //Sending 2 to initialise LCD 4-bit mode
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA, EN); //Set Enable Pin
 190:	17 9a       	sbi	0x02, 7	; 2
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x86>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x8c>
 19c:	00 00       	nop
    _delay_ms(5);    //Delay
    cbit(PORTA, EN); //Clear Enable Pin
 19e:	17 98       	cbi	0x02, 7	; 2
 1a0:	08 95       	ret

000001a2 <lcd_wr_command>:
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd) {
    unsigned char temp;
    temp = cmd;
    temp = temp & 0xF0;
    lcd_port &= 0x0F;
 1a2:	98 b1       	in	r25, 0x08	; 8
 1a4:	9f 70       	andi	r25, 0x0F	; 15
 1a6:	98 b9       	out	0x08, r25	; 8
    lcd_port |= temp;
 1a8:	28 b1       	in	r18, 0x08	; 8

//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd) {
    unsigned char temp;
    temp = cmd;
    temp = temp & 0xF0;
 1aa:	98 2f       	mov	r25, r24
 1ac:	90 7f       	andi	r25, 0xF0	; 240
    lcd_port &= 0x0F;
    lcd_port |= temp;
 1ae:	92 2b       	or	r25, r18
 1b0:	98 b9       	out	0x08, r25	; 8
    cbit(PORTA, RS);
 1b2:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW);
 1b4:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA, EN);
 1b6:	17 9a       	sbi	0x02, 7	; 2
 1b8:	ef e1       	ldi	r30, 0x1F	; 31
 1ba:	fe e4       	ldi	r31, 0x4E	; 78
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_wr_command+0x1a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_wr_command+0x20>
 1c2:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA, EN);
 1c4:	17 98       	cbi	0x02, 7	; 2
    
    cmd = cmd & 0x0F;
    cmd = cmd << 4;
    lcd_port &= 0x0F;
 1c6:	98 b1       	in	r25, 0x08	; 8
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	98 b9       	out	0x08, r25	; 8
    lcd_port |= cmd;
 1cc:	98 b1       	in	r25, 0x08	; 8
    sbit(PORTA, EN);
    _delay_ms(5);
    cbit(PORTA, EN);
    
    cmd = cmd & 0x0F;
    cmd = cmd << 4;
 1ce:	82 95       	swap	r24
 1d0:	80 7f       	andi	r24, 0xF0	; 240
    lcd_port &= 0x0F;
    lcd_port |= cmd;
 1d2:	89 2b       	or	r24, r25
 1d4:	88 b9       	out	0x08, r24	; 8
    cbit(PORTA, RS);
 1d6:	13 98       	cbi	0x02, 3	; 2
    cbit(PORTA, RW);
 1d8:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA, EN);
 1da:	17 9a       	sbi	0x02, 7	; 2
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_wr_command+0x3e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_wr_command+0x44>
 1e6:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA, EN);
 1e8:	17 98       	cbi	0x02, 7	; 2
 1ea:	08 95       	ret

000001ec <lcd_init>:
    cbit(PORTA, EN); //Clear Enable Pin
}

//Function to Initialize LCD
void lcd_init(void) {
    lcd_set_4bit();
 1ec:	0e 94 88 00 	call	0x110	; 0x110 <lcd_set_4bit>
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_init+0x8>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_init+0xe>
 1fa:	00 00       	nop
    _delay_ms(1);
    
    lcd_wr_command(0x28); //LCD 4-bit mode and 2 lines.
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_wr_command>
    lcd_wr_command(0x01);
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_wr_command>
    lcd_wr_command(0x06);
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_wr_command>
    lcd_wr_command(0x0E);
 20e:	8e e0       	ldi	r24, 0x0E	; 14
 210:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_wr_command>
    lcd_wr_command(0x80);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <lcd_wr_command>

0000021a <lcd_wr_char>:
//Function to Write Data on LCD
void lcd_wr_char(char letter) {
    char temp;
    temp = letter;
    temp = (temp & 0xF0);
    lcd_port &= 0x0F;
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	98 b9       	out	0x08, r25	; 8
    lcd_port |= temp;
 220:	28 b1       	in	r18, 0x08	; 8

//Function to Write Data on LCD
void lcd_wr_char(char letter) {
    char temp;
    temp = letter;
    temp = (temp & 0xF0);
 222:	98 2f       	mov	r25, r24
 224:	90 7f       	andi	r25, 0xF0	; 240
    lcd_port &= 0x0F;
    lcd_port |= temp;
 226:	92 2b       	or	r25, r18
 228:	98 b9       	out	0x08, r25	; 8
    sbit(PORTA, RS);
 22a:	13 9a       	sbi	0x02, 3	; 2
    cbit(PORTA, RW);
 22c:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA, EN);
 22e:	17 9a       	sbi	0x02, 7	; 2
 230:	ef e1       	ldi	r30, 0x1F	; 31
 232:	fe e4       	ldi	r31, 0x4E	; 78
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
 23a:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA, EN);
 23c:	17 98       	cbi	0x02, 7	; 2
    
    letter = letter & 0x0F;
    letter = letter << 4;
    lcd_port &= 0x0F;
 23e:	98 b1       	in	r25, 0x08	; 8
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	98 b9       	out	0x08, r25	; 8
    lcd_port |= letter;
 244:	98 b1       	in	r25, 0x08	; 8
    sbit(PORTA, EN);
    _delay_ms(5);
    cbit(PORTA, EN);
    
    letter = letter & 0x0F;
    letter = letter << 4;
 246:	82 95       	swap	r24
 248:	80 7f       	andi	r24, 0xF0	; 240
    lcd_port &= 0x0F;
    lcd_port |= letter;
 24a:	89 2b       	or	r24, r25
 24c:	88 b9       	out	0x08, r24	; 8
    sbit(PORTA, RS);
 24e:	13 9a       	sbi	0x02, 3	; 2
    cbit(PORTA, RW);
 250:	15 98       	cbi	0x02, 5	; 2
    sbit(PORTA, EN);
 252:	17 9a       	sbi	0x02, 7	; 2
 254:	8f e1       	ldi	r24, 0x1F	; 31
 256:	9e e4       	ldi	r25, 0x4E	; 78
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
 25e:	00 00       	nop
    _delay_ms(5);
    cbit(PORTA, EN);
 260:	17 98       	cbi	0x02, 7	; 2
 262:	08 95       	ret

00000264 <lcd_home>:
}

//Function to bring cursor at home position
void lcd_home(void) {
    lcd_wr_command(0x80);
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <lcd_wr_command>

0000026a <lcd_string>:
}

//Function to Print String on LCD
void lcd_string(char *str) {
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
    while (*str != '\0') {
 270:	89 91       	ld	r24, Y+
 272:	88 23       	and	r24, r24
 274:	19 f0       	breq	.+6      	; 0x27c <lcd_string+0x12>
        lcd_wr_char(*str);
 276:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
 27a:	fa cf       	rjmp	.-12     	; 0x270 <lcd_string+0x6>
        str++;
    }
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor(char row, char column) {
 282:	98 2f       	mov	r25, r24
 284:	86 2f       	mov	r24, r22
    switch (row) {
 286:	92 30       	cpi	r25, 0x02	; 2
 288:	59 f0       	breq	.+22     	; 0x2a0 <lcd_cursor+0x1e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <lcd_cursor+0x10>
 28c:	91 30       	cpi	r25, 0x01	; 1
 28e:	31 f0       	breq	.+12     	; 0x29c <lcd_cursor+0x1a>
 290:	08 95       	ret
 292:	93 30       	cpi	r25, 0x03	; 3
 294:	39 f0       	breq	.+14     	; 0x2a4 <lcd_cursor+0x22>
 296:	94 30       	cpi	r25, 0x04	; 4
 298:	39 f0       	breq	.+14     	; 0x2a8 <lcd_cursor+0x26>
 29a:	08 95       	ret
        case 1:
            lcd_wr_command(0x80 + column - 1);
 29c:	81 58       	subi	r24, 0x81	; 129
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <lcd_cursor+0x28>
            break;
        case 2:
            lcd_wr_command(0xc0 + column - 1);
 2a0:	81 54       	subi	r24, 0x41	; 65
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <lcd_cursor+0x28>
            break;
        case 3:
            lcd_wr_command(0x94 + column - 1);
 2a4:	8d 56       	subi	r24, 0x6D	; 109
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <lcd_cursor+0x28>
            break;
        case 4:
            lcd_wr_command(0xd4 + column - 1);
 2a8:	8d 52       	subi	r24, 0x2D	; 45
 2aa:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <lcd_wr_command>

000002ae <lcd_print>:
            break;
    }
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print(char row, char coloumn, unsigned int value, int digits) {
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	8a 01       	movw	r16, r20
 2b8:	e9 01       	movw	r28, r18
    unsigned char flag = 0;
    if (row == 0 || coloumn == 0) {
 2ba:	88 23       	and	r24, r24
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <lcd_print+0x14>
 2be:	61 11       	cpse	r22, r1
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <lcd_print+0x1a>
        lcd_home();
 2c2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_home>
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <lcd_print+0x1e>
    } else {
        lcd_cursor(row, coloumn);
 2c8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_cursor>
    }
    if (digits == 5 || flag == 1) {
 2cc:	c5 30       	cpi	r28, 0x05	; 5
 2ce:	d1 05       	cpc	r29, r1
 2d0:	79 f4       	brne	.+30     	; 0x2f0 <lcd_print+0x42>
        million = value / 10000 + 48;
 2d2:	c8 01       	movw	r24, r16
 2d4:	60 e1       	ldi	r22, 0x10	; 16
 2d6:	77 e2       	ldi	r23, 0x27	; 39
 2d8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 2dc:	60 5d       	subi	r22, 0xD0	; 208
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	70 93 1d 02 	sts	0x021D, r23
 2e4:	60 93 1c 02 	sts	0x021C, r22
        lcd_wr_char(million);
 2e8:	86 2f       	mov	r24, r22
 2ea:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <lcd_print+0x48>
        flag = 1;
    }
    if (digits == 4 || flag == 1) {
 2f0:	c4 30       	cpi	r28, 0x04	; 4
 2f2:	d1 05       	cpc	r29, r1
 2f4:	59 f5       	brne	.+86     	; 0x34c <lcd_print+0x9e>
        temp = value / 1000;
 2f6:	c8 01       	movw	r24, r16
 2f8:	68 ee       	ldi	r22, 0xE8	; 232
 2fa:	73 e0       	ldi	r23, 0x03	; 3
 2fc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 300:	cb 01       	movw	r24, r22
 302:	70 93 23 02 	sts	0x0223, r23
 306:	60 93 22 02 	sts	0x0222, r22
        thousand = temp % 10 + 48;
 30a:	6a e0       	ldi	r22, 0x0A	; 10
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 312:	c0 96       	adiw	r24, 0x30	; 48
 314:	90 93 39 02 	sts	0x0239, r25
 318:	80 93 38 02 	sts	0x0238, r24
        lcd_wr_char(thousand);
 31c:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
        flag = 1;
    }
    if (digits == 3 || flag == 1) {
        temp = value / 100;
 320:	c8 01       	movw	r24, r16
 322:	64 e6       	ldi	r22, 0x64	; 100
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 32a:	cb 01       	movw	r24, r22
 32c:	70 93 23 02 	sts	0x0223, r23
 330:	60 93 22 02 	sts	0x0222, r22
        hundred = temp % 10 + 48;
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 33c:	c0 96       	adiw	r24, 0x30	; 48
 33e:	90 93 31 02 	sts	0x0231, r25
 342:	80 93 30 02 	sts	0x0230, r24
        lcd_wr_char(hundred);
 346:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
 34a:	06 c0       	rjmp	.+12     	; 0x358 <lcd_print+0xaa>
        temp = value / 1000;
        thousand = temp % 10 + 48;
        lcd_wr_char(thousand);
        flag = 1;
    }
    if (digits == 3 || flag == 1) {
 34c:	c3 30       	cpi	r28, 0x03	; 3
 34e:	d1 05       	cpc	r29, r1
 350:	39 f3       	breq	.-50     	; 0x320 <lcd_print+0x72>
        temp = value / 100;
        hundred = temp % 10 + 48;
        lcd_wr_char(hundred);
        flag = 1;
    }
    if (digits == 2 || flag == 1) {
 352:	c2 30       	cpi	r28, 0x02	; 2
 354:	d1 05       	cpc	r29, r1
 356:	51 f5       	brne	.+84     	; 0x3ac <lcd_print+0xfe>
        temp = value / 10;
 358:	2a e0       	ldi	r18, 0x0A	; 10
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	c8 01       	movw	r24, r16
 35e:	b9 01       	movw	r22, r18
 360:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 364:	cb 01       	movw	r24, r22
 366:	70 93 23 02 	sts	0x0223, r23
 36a:	60 93 22 02 	sts	0x0222, r22
        tens = temp % 10 + 48;
 36e:	b9 01       	movw	r22, r18
 370:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 25 02 	sts	0x0225, r25
 37a:	80 93 24 02 	sts	0x0224, r24
        lcd_wr_char(tens);
 37e:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
        flag = 1;
    }
    if (digits == 1 || flag == 1) {
        unit = value % 10 + 48;
 382:	c8 01       	movw	r24, r16
 384:	6a e0       	ldi	r22, 0x0A	; 10
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 38c:	c0 96       	adiw	r24, 0x30	; 48
 38e:	90 93 37 02 	sts	0x0237, r25
 392:	80 93 36 02 	sts	0x0236, r24
        lcd_wr_char(unit);
 396:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_wr_char>
    }
    if (digits > 5) {
 39a:	26 97       	sbiw	r28, 0x06	; 6
 39c:	5c f0       	brlt	.+22     	; 0x3b4 <lcd_print+0x106>
        lcd_wr_char('E');
 39e:	85 e4       	ldi	r24, 0x45	; 69
    }
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
    if (digits == 1 || flag == 1) {
        unit = value % 10 + 48;
        lcd_wr_char(unit);
    }
    if (digits > 5) {
        lcd_wr_char('E');
 3a8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <lcd_wr_char>
        temp = value / 10;
        tens = temp % 10 + 48;
        lcd_wr_char(tens);
        flag = 1;
    }
    if (digits == 1 || flag == 1) {
 3ac:	c1 30       	cpi	r28, 0x01	; 1
 3ae:	d1 05       	cpc	r29, r1
 3b0:	a1 f7       	brne	.-24     	; 0x39a <lcd_print+0xec>
 3b2:	e7 cf       	rjmp	.-50     	; 0x382 <lcd_print+0xd4>
        lcd_wr_char(unit);
    }
    if (digits > 5) {
        lcd_wr_char('E');
    }
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <lcd_port_config>:

uint16_t lefts, centres, rights;

//Function to configure LCD port
void lcd_port_config(void) {
    DDRC = DDRC | 0xF0; //all the LCD pin's direction set as output
 3be:	87 b1       	in	r24, 0x07	; 7
 3c0:	80 6f       	ori	r24, 0xF0	; 240
 3c2:	87 b9       	out	0x07, r24	; 7
    DDRA |= 0xA8;
 3c4:	81 b1       	in	r24, 0x01	; 1
 3c6:	88 6a       	ori	r24, 0xA8	; 168
 3c8:	81 b9       	out	0x01, r24	; 1
    PORTC = PORTC & 0x0F; // all the LCD pins are set to logic 0 except PORTC 7
 3ca:	88 b1       	in	r24, 0x08	; 8
 3cc:	8f 70       	andi	r24, 0x0F	; 15
 3ce:	88 b9       	out	0x08, r24	; 8
    PORTA &= 0x57;
 3d0:	82 b1       	in	r24, 0x02	; 2
 3d2:	87 75       	andi	r24, 0x57	; 87
 3d4:	82 b9       	out	0x02, r24	; 2
 3d6:	08 95       	ret

000003d8 <adc_pin_config>:
}

//ADC pin configuration
void adc_pin_config(void) {
    DDRF = 0x00;  //set PORTF direction as input
 3d8:	10 ba       	out	0x10, r1	; 16
    PORTF = 0x00; //set PORTF pins floating
 3da:	11 ba       	out	0x11, r1	; 17
    DDRK = 0x00;  //set PORTK direction as input
 3dc:	10 92 07 01 	sts	0x0107, r1
    PORTK = 0x00; //set PORTK pins floating
 3e0:	10 92 08 01 	sts	0x0108, r1
 3e4:	08 95       	ret

000003e6 <motion_pin_config>:
}

//Function to configure ports to enable robot's motion
void motion_pin_config(void) {
    DDRA = DDRA | 0x55;
 3e6:	81 b1       	in	r24, 0x01	; 1
 3e8:	85 65       	ori	r24, 0x55	; 85
 3ea:	81 b9       	out	0x01, r24	; 1
    PORTA &= ~((1 << 0) & (1 << 2) & (1 << 4) & (1 << 6));
 3ec:	82 b1       	in	r24, 0x02	; 2
 3ee:	82 b9       	out	0x02, r24	; 2
    DDRE = DDRE | 0x30;   //Setting PL3 and PL4 pins as output for PWM generation
 3f0:	8d b1       	in	r24, 0x0d	; 13
 3f2:	80 63       	ori	r24, 0x30	; 48
 3f4:	8d b9       	out	0x0d, r24	; 13
    PORTE = PORTE | 0x30; //PL3 and PL4 pins are for velocity control using PWM.
 3f6:	8e b1       	in	r24, 0x0e	; 14
 3f8:	80 63       	ori	r24, 0x30	; 48
 3fa:	8e b9       	out	0x0e, r24	; 14
 3fc:	08 95       	ret

000003fe <rgb_init>:
}

void rgb_init()
{
    DDRK = 0xFF;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	80 93 07 01 	sts	0x0107, r24
    PORTK = 0xFF;
 404:	80 93 08 01 	sts	0x0108, r24
 408:	08 95       	ret

0000040a <port_init>:
}
//Function to Initialize PORTS
void port_init(void) {
    lcd_port_config();
 40a:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_port_config>
    adc_pin_config();
 40e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <adc_pin_config>
    motion_pin_config();
 412:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <motion_pin_config>

00000416 <timer3_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer3_init(void) {
    TCCR3B = 0x00; //Stop
 416:	e1 e9       	ldi	r30, 0x91	; 145
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	10 82       	st	Z, r1
    TCNT3H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	80 93 95 00 	sts	0x0095, r24
    TCNT3L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	90 93 94 00 	sts	0x0094, r25
    OCR3BH = 0x00; //Output compare register high value for Left Motor
 428:	10 92 9b 00 	sts	0x009B, r1
    OCR3BL = 0xFF; //Output compare register low value for Left Motor
 42c:	80 93 9a 00 	sts	0x009A, r24
    OCR3CH = 0x00; //Output compare register high value for Right Motor
 430:	10 92 9d 00 	sts	0x009D, r1
    OCR3CL = 0xFF; //Output compare register low value for Right Motor
 434:	80 93 9c 00 	sts	0x009C, r24
    TCCR3A = 0xA9; /*{COM3A1=1, COM3A0=0; COM3B1=1, COM3B0=0; COM3C1=1 COM3C0=0}
 438:	89 ea       	ldi	r24, 0xA9	; 169
 43a:	80 93 90 00 	sts	0x0090, r24
                    For Overriding normal port functionality to OCRnA outputs.
                    {WGM31=0, WGM30=1} Along With WGM32 in TCCR3B for Selecting FAST PWM 8-bit Mode*/
    TCCR3B = 0x0B; //WGM32=1; CS32=0, CS31=1, CS30=1 (Prescaler=64)
 43e:	8b e0       	ldi	r24, 0x0B	; 11
 440:	80 83       	st	Z, r24
 442:	08 95       	ret

00000444 <adc_init>:
}

//Function to Initialize ADC
void adc_init(void) {
    ADMUX = (0 << REFS1) | (1 << REFS0) | (0 << ADLAR);                                             // AVcc //  right adjusted
 444:	80 e4       	ldi	r24, 0x40	; 64
 446:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1 << ADEN) | (0 << ADATE) | (0 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // bit4 ADC EOC flag // prescalar- 111 - 128 division factor
 44a:	87 e8       	ldi	r24, 0x87	; 135
 44c:	80 93 7a 00 	sts	0x007A, r24
    ADCSRB = 0x00;
 450:	10 92 7b 00 	sts	0x007B, r1
 454:	08 95       	ret

00000456 <limit_vel>:
}

int limit_vel(int velocity) {
    if (velocity >= 255) {
 456:	8f 3f       	cpi	r24, 0xFF	; 255
 458:	91 05       	cpc	r25, r1
 45a:	3c f4       	brge	.+14     	; 0x46a <limit_vel+0x14>
        return 255;
    } else if (velocity <= -255) {
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	92 07       	cpc	r25, r18
 462:	2c f4       	brge	.+10     	; 0x46e <limit_vel+0x18>
        return -255;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	9f ef       	ldi	r25, 0xFF	; 255
 468:	08 95       	ret
    ADCSRB = 0x00;
}

int limit_vel(int velocity) {
    if (velocity >= 255) {
        return 255;
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	90 e0       	ldi	r25, 0x00	; 0
    } else if (velocity <= -255) {
        return -255;
    } else {
        return velocity;
    }
}
 46e:	08 95       	ret

00000470 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value
uint16_t ADC_Conversion(uint8_t ch) {
    ADMUX = ADMUX & 0b11100000;   //Clearing all the mux
 470:	90 91 7c 00 	lds	r25, 0x007C
 474:	90 7e       	andi	r25, 0xE0	; 224
 476:	90 93 7c 00 	sts	0x007C, r25
    ADCSRB = ADCSRB & 0b11110111; //------"-"-----------
 47a:	90 91 7b 00 	lds	r25, 0x007B
 47e:	97 7f       	andi	r25, 0xF7	; 247
 480:	90 93 7b 00 	sts	0x007B, r25
    ch = ch & 0b00001111;
 484:	98 2f       	mov	r25, r24
 486:	9f 70       	andi	r25, 0x0F	; 15
    if (ch <= 7) {
 488:	98 30       	cpi	r25, 0x08	; 8
 48a:	48 f4       	brcc	.+18     	; 0x49e <ADC_Conversion+0x2e>
        ch = ch & 0b00000111; //
        ADMUX = ADMUX | ch;
 48c:	90 91 7c 00 	lds	r25, 0x007C
uint16_t ADC_Conversion(uint8_t ch) {
    ADMUX = ADMUX & 0b11100000;   //Clearing all the mux
    ADCSRB = ADCSRB & 0b11110111; //------"-"-----------
    ch = ch & 0b00001111;
    if (ch <= 7) {
        ch = ch & 0b00000111; //
 490:	87 70       	andi	r24, 0x07	; 7
        ADMUX = ADMUX | ch;
 492:	89 2b       	or	r24, r25
 494:	80 93 7c 00 	sts	0x007C, r24
        ADCSRB = 0x00;
 498:	10 92 7b 00 	sts	0x007B, r1
 49c:	0e c0       	rjmp	.+28     	; 0x4ba <ADC_Conversion+0x4a>
    } else {
        ch = ch - 8;
        ch = ch & 0b00000111;
        ADMUX = ADMUX | ch;
 49e:	20 91 7c 00 	lds	r18, 0x007C
    if (ch <= 7) {
        ch = ch & 0b00000111; //
        ADMUX = ADMUX | ch;
        ADCSRB = 0x00;
    } else {
        ch = ch - 8;
 4a2:	88 ef       	ldi	r24, 0xF8	; 248
 4a4:	89 0f       	add	r24, r25
        ch = ch & 0b00000111;
        ADMUX = ADMUX | ch;
 4a6:	82 2b       	or	r24, r18
 4a8:	80 93 7c 00 	sts	0x007C, r24
        ADCSRB = 0x00;
 4ac:	10 92 7b 00 	sts	0x007B, r1
        ADCSRB = ADCSRB | (1 << MUX5);
 4b0:	80 91 7b 00 	lds	r24, 0x007B
 4b4:	88 60       	ori	r24, 0x08	; 8
 4b6:	80 93 7b 00 	sts	0x007B, r24
    }
    ADCSRA = ADCSRA | (1 << ADSC); //Bit 6 to start conversion-ADSC
 4ba:	80 91 7a 00 	lds	r24, 0x007A
 4be:	80 64       	ori	r24, 0x40	; 64
 4c0:	80 93 7a 00 	sts	0x007A, r24
    while (!(ADCSRA & (1 << ADIF)))
 4c4:	80 91 7a 00 	lds	r24, 0x007A
 4c8:	84 ff       	sbrs	r24, 4
 4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <ADC_Conversion+0x54>
        ; // Wait for conversion to complete
    return (ADC);
 4cc:	80 91 78 00 	lds	r24, 0x0078
 4d0:	90 91 79 00 	lds	r25, 0x0079
}
 4d4:	08 95       	ret

000004d6 <velocity>:

void velocity(int left_motor, int right_motor) {
    if(left_motor < 0)
 4d6:	97 ff       	sbrs	r25, 7
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <velocity+0x10>
    {
        left_motor = -left_motor;
 4da:	91 95       	neg	r25
 4dc:	81 95       	neg	r24
 4de:	91 09       	sbc	r25, r1
        PORTA |= (1<<4);
 4e0:	14 9a       	sbi	0x02, 4	; 2
        PORTA &= ~(1<<6);
 4e2:	16 98       	cbi	0x02, 6	; 2
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <velocity+0x14>
    }
    else if(left_motor >= 0)
    {
        PORTA &= ~(1<<4);
 4e6:	14 98       	cbi	0x02, 4	; 2
        PORTA |= (1<<6);
 4e8:	16 9a       	sbi	0x02, 6	; 2
    else
    {
        PORTA &= ~(1<<4);
        PORTA &= ~(1<<6);
    }
    if(right_motor >= 0)
 4ea:	77 fd       	sbrc	r23, 7
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <velocity+0x1e>
    {
        PORTA |= (1<<0);
 4ee:	10 9a       	sbi	0x02, 0	; 2
        PORTA &= ~(1<<2);
 4f0:	12 98       	cbi	0x02, 2	; 2
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <velocity+0x28>
    }
    else if(right_motor < 0)
    {
        PORTA &= ~(1<<0);
 4f4:	10 98       	cbi	0x02, 0	; 2
        PORTA |= (1<<2);
 4f6:	12 9a       	sbi	0x02, 2	; 2
        right_motor = -right_motor;
 4f8:	71 95       	neg	r23
 4fa:	61 95       	neg	r22
 4fc:	71 09       	sbc	r23, r1
    else
    {
        PORTA &= ~(1<<0);
        PORTA &= ~(1<<2);
    }
    OCR3BL = left_motor;
 4fe:	80 93 9a 00 	sts	0x009A, r24
    OCR3CL = right_motor-5;
 502:	65 50       	subi	r22, 0x05	; 5
 504:	60 93 9c 00 	sts	0x009C, r22
 508:	08 95       	ret

0000050a <forward>:
}

void forward(void) {
    PORTA = PORTA & 0xAA;
 50a:	82 b1       	in	r24, 0x02	; 2
 50c:	8a 7a       	andi	r24, 0xAA	; 170
 50e:	82 b9       	out	0x02, r24	; 2
    PORTA |= 0x41;
 510:	82 b1       	in	r24, 0x02	; 2
 512:	81 64       	ori	r24, 0x41	; 65
 514:	82 b9       	out	0x02, r24	; 2
 516:	08 95       	ret

00000518 <stop>:
}

void stop(void) {
    PORTA = 0xAA;
 518:	8a ea       	ldi	r24, 0xAA	; 170
 51a:	82 b9       	out	0x02, r24	; 2
 51c:	08 95       	ret

0000051e <uturn>:
}
void uturn()
{
    velocity(100,-80);
 51e:	60 eb       	ldi	r22, 0xB0	; 176
 520:	7f ef       	ldi	r23, 0xFF	; 255
 522:	84 e6       	ldi	r24, 0x64	; 100
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <velocity>
 52a:	2f ef       	ldi	r18, 0xFF	; 255
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	97 e2       	ldi	r25, 0x27	; 39
 530:	21 50       	subi	r18, 0x01	; 1
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <uturn+0x12>
 538:	00 c0       	rjmp	.+0      	; 0x53a <uturn+0x1c>
 53a:	00 00       	nop
    _delay_ms(800);
    centres = ADC_Conversion(2);
    while(centres <= 250)
    {
        centres = ADC_Conversion(2);
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 542:	90 93 27 02 	sts	0x0227, r25
 546:	80 93 26 02 	sts	0x0226, r24
void uturn()
{
    velocity(100,-80);
    _delay_ms(800);
    centres = ADC_Conversion(2);
    while(centres <= 250)
 54a:	80 91 26 02 	lds	r24, 0x0226
 54e:	90 91 27 02 	lds	r25, 0x0227
 552:	8b 3f       	cpi	r24, 0xFB	; 251
 554:	91 05       	cpc	r25, r1
 556:	90 f3       	brcs	.-28     	; 0x53c <uturn+0x1e>
    PORTA = PORTA & 0xAA;
    PORTA |= 0x41;
}

void stop(void) {
    PORTA = 0xAA;
 558:	8a ea       	ldi	r24, 0xAA	; 170
 55a:	82 b9       	out	0x02, r24	; 2
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	89 e6       	ldi	r24, 0x69	; 105
 560:	98 e1       	ldi	r25, 0x18	; 24
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <uturn+0x44>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <uturn+0x4e>
 56c:	00 00       	nop
    {
        centres = ADC_Conversion(2);
    }
    stop();
    _delay_ms(500);
    node_detect = 0;
 56e:	10 92 3b 02 	sts	0x023B, r1
 572:	10 92 3a 02 	sts	0x023A, r1
    checknode = 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 01 02 	sts	0x0201, r24
 57c:	08 95       	ret

0000057e <progress_task>:
}
void progress_task()
{
    if(checknode == 0)
 57e:	80 91 01 02 	lds	r24, 0x0201
 582:	81 11       	cpse	r24, r1
 584:	21 c0       	rjmp	.+66     	; 0x5c8 <progress_task+0x4a>
    {
        if(sharp_ir >=430 && checklift == 0)
 586:	80 91 34 02 	lds	r24, 0x0234
 58a:	90 91 35 02 	lds	r25, 0x0235
 58e:	8e 3a       	cpi	r24, 0xAE	; 174
 590:	21 e0       	ldi	r18, 0x01	; 1
 592:	92 07       	cpc	r25, r18
 594:	0c f4       	brge	.+2      	; 0x598 <progress_task+0x1a>
 596:	45 c0       	rjmp	.+138    	; 0x622 <progress_task+0xa4>
 598:	20 91 00 02 	lds	r18, 0x0200
 59c:	21 11       	cpse	r18, r1
 59e:	0f c0       	rjmp	.+30     	; 0x5be <progress_task+0x40>
    PORTA = PORTA & 0xAA;
    PORTA |= 0x41;
}

void stop(void) {
    PORTA = 0xAA;
 5a0:	8a ea       	ldi	r24, 0xAA	; 170
 5a2:	82 b9       	out	0x02, r24	; 2
 5a4:	3f ef       	ldi	r19, 0xFF	; 255
 5a6:	85 ee       	ldi	r24, 0xE5	; 229
 5a8:	9a ea       	ldi	r25, 0xAA	; 170
 5aa:	31 50       	subi	r19, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <progress_task+0x2c>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <progress_task+0x36>
 5b4:	00 00       	nop
    {
        if(sharp_ir >=430 && checklift == 0)
        {
            stop();
            _delay_ms(3500);
            checklift = 1;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	80 93 00 02 	sts	0x0200, r24
 5bc:	08 95       	ret
        }
        else if(sharp_ir >= 550 && checklift == 1)
 5be:	86 32       	cpi	r24, 0x26	; 38
 5c0:	92 40       	sbci	r25, 0x02	; 2
 5c2:	7c f1       	brlt	.+94     	; 0x622 <progress_task+0xa4>
        {
            uturn();
 5c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <uturn>
        }
    }
    else
    {
        if(node_detect == 2)
 5c8:	80 91 3a 02 	lds	r24, 0x023A
 5cc:	90 91 3b 02 	lds	r25, 0x023B
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	91 05       	cpc	r25, r1
 5d4:	a9 f4       	brne	.+42     	; 0x600 <progress_task+0x82>
    PORTA = PORTA & 0xAA;
    PORTA |= 0x41;
}

void stop(void) {
    PORTA = 0xAA;
 5d6:	8a ea       	ldi	r24, 0xAA	; 170
 5d8:	82 b9       	out	0x02, r24	; 2
 5da:	3f ef       	ldi	r19, 0xFF	; 255
 5dc:	83 e2       	ldi	r24, 0x23	; 35
 5de:	94 ef       	ldi	r25, 0xF4	; 244
 5e0:	31 50       	subi	r19, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <progress_task+0x62>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <progress_task+0x6c>
 5ea:	00 00       	nop
    {
        if(node_detect == 2)
        {
            stop();
            _delay_ms(5000);
            node_detect++;
 5ec:	80 91 3a 02 	lds	r24, 0x023A
 5f0:	90 91 3b 02 	lds	r25, 0x023B
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	90 93 3b 02 	sts	0x023B, r25
 5fa:	80 93 3a 02 	sts	0x023A, r24
 5fe:	08 95       	ret
        }
        else if(node_detect == 5)
 600:	05 97       	sbiw	r24, 0x05	; 5
 602:	79 f4       	brne	.+30     	; 0x622 <progress_task+0xa4>
    PORTA = PORTA & 0xAA;
    PORTA |= 0x41;
}

void stop(void) {
    PORTA = 0xAA;
 604:	8a ea       	ldi	r24, 0xAA	; 170
 606:	82 b9       	out	0x02, r24	; 2
            node_detect++;
        }
        else if(node_detect == 5)
        {
            stop();
            PORTK = ~(1<<3);
 608:	87 ef       	ldi	r24, 0xF7	; 247
 60a:	80 93 08 01 	sts	0x0108, r24
 60e:	2a ea       	ldi	r18, 0xAA	; 170
 610:	32 e0       	ldi	r19, 0x02	; 2
 612:	85 ee       	ldi	r24, 0xE5	; 229
 614:	9f e0       	ldi	r25, 0x0F	; 15
 616:	21 50       	subi	r18, 0x01	; 1
 618:	30 40       	sbci	r19, 0x00	; 0
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	d9 f7       	brne	.-10     	; 0x616 <progress_task+0x98>
 620:	00 00       	nop
 622:	08 95       	ret

00000624 <init_devices>:
            _delay_ms(100000);
        }
    }
}
void init_devices(void) {
    cli(); //Clears the global interrupts
 624:	f8 94       	cli
    port_init();
 626:	0e 94 05 02 	call	0x40a	; 0x40a <port_init>
    adc_init();
 62a:	0e 94 22 02 	call	0x444	; 0x444 <adc_init>
    timer3_init();
 62e:	0e 94 0b 02 	call	0x416	; 0x416 <timer3_init>
    sei(); //Enables the global interrupts
 632:	78 94       	sei
 634:	08 95       	ret

00000636 <line_follow>:
}

void line_follow(void) {
 636:	4f 92       	push	r4
 638:	5f 92       	push	r5
 63a:	6f 92       	push	r6
 63c:	7f 92       	push	r7
 63e:	8f 92       	push	r8
 640:	9f 92       	push	r9
 642:	af 92       	push	r10
 644:	bf 92       	push	r11
 646:	cf 92       	push	r12
 648:	df 92       	push	r13
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
    int i = 0;
    sens_count = 0;
 656:	10 92 0e 02 	sts	0x020E, r1
 65a:	10 92 0f 02 	sts	0x020F, r1
 65e:	10 92 10 02 	sts	0x0210, r1
 662:	10 92 11 02 	sts	0x0211, r1
    sens_black = 0;
 666:	10 92 0a 02 	sts	0x020A, r1
 66a:	10 92 0b 02 	sts	0x020B, r1
 66e:	10 92 0c 02 	sts	0x020C, r1
 672:	10 92 0d 02 	sts	0x020D, r1
 676:	02 e1       	ldi	r16, 0x12	; 18
 678:	12 e0       	ldi	r17, 0x02	; 2
 67a:	c1 e0       	ldi	r28, 0x01	; 1
 67c:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i <= 2; i++) {
        sens[i] = ADC_Conversion(i + 1);
 67e:	8c 2f       	mov	r24, r28
 680:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 684:	f8 01       	movw	r30, r16
 686:	81 93       	st	Z+, r24
 688:	91 93       	st	Z+, r25
 68a:	8f 01       	movw	r16, r30
        if (sens[i] > thresh) //on white line
 68c:	87 39       	cpi	r24, 0x97	; 151
 68e:	91 05       	cpc	r25, r1
 690:	8c f1       	brlt	.+98     	; 0x6f4 <line_follow+0xbe>
        {
            sens_black += i + 1;
 692:	be 01       	movw	r22, r28
 694:	88 27       	eor	r24, r24
 696:	77 fd       	sbrc	r23, 7
 698:	80 95       	com	r24
 69a:	98 2f       	mov	r25, r24
 69c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
 6a0:	9b 01       	movw	r18, r22
 6a2:	ac 01       	movw	r20, r24
 6a4:	60 91 0a 02 	lds	r22, 0x020A
 6a8:	70 91 0b 02 	lds	r23, 0x020B
 6ac:	80 91 0c 02 	lds	r24, 0x020C
 6b0:	90 91 0d 02 	lds	r25, 0x020D
 6b4:	0e 94 c7 04 	call	0x98e	; 0x98e <__addsf3>
 6b8:	60 93 0a 02 	sts	0x020A, r22
 6bc:	70 93 0b 02 	sts	0x020B, r23
 6c0:	80 93 0c 02 	sts	0x020C, r24
 6c4:	90 93 0d 02 	sts	0x020D, r25
            sens_count++;
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 e8       	ldi	r20, 0x80	; 128
 6ce:	5f e3       	ldi	r21, 0x3F	; 63
 6d0:	60 91 0e 02 	lds	r22, 0x020E
 6d4:	70 91 0f 02 	lds	r23, 0x020F
 6d8:	80 91 10 02 	lds	r24, 0x0210
 6dc:	90 91 11 02 	lds	r25, 0x0211
 6e0:	0e 94 c7 04 	call	0x98e	; 0x98e <__addsf3>
 6e4:	60 93 0e 02 	sts	0x020E, r22
 6e8:	70 93 0f 02 	sts	0x020F, r23
 6ec:	80 93 10 02 	sts	0x0210, r24
 6f0:	90 93 11 02 	sts	0x0211, r25
 6f4:	21 96       	adiw	r28, 0x01	; 1

void line_follow(void) {
    int i = 0;
    sens_count = 0;
    sens_black = 0;
    for (i = 0; i <= 2; i++) {
 6f6:	c4 30       	cpi	r28, 0x04	; 4
 6f8:	d1 05       	cpc	r29, r1
 6fa:	09 f6       	brne	.-126    	; 0x67e <line_follow+0x48>
        {
            sens_black += i + 1;
            sens_count++;
        }
    }
    error = (sens_black / sens_count) - 2;
 6fc:	20 91 0e 02 	lds	r18, 0x020E
 700:	30 91 0f 02 	lds	r19, 0x020F
 704:	40 91 10 02 	lds	r20, 0x0210
 708:	50 91 11 02 	lds	r21, 0x0211
 70c:	60 91 0a 02 	lds	r22, 0x020A
 710:	70 91 0b 02 	lds	r23, 0x020B
 714:	80 91 0c 02 	lds	r24, 0x020C
 718:	90 91 0d 02 	lds	r25, 0x020D
 71c:	0e 94 2b 05 	call	0xa56	; 0xa56 <__divsf3>
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	50 e4       	ldi	r21, 0x40	; 64
 728:	0e 94 c6 04 	call	0x98c	; 0x98c <__subsf3>
 72c:	60 93 28 02 	sts	0x0228, r22
 730:	70 93 29 02 	sts	0x0229, r23
 734:	80 93 2a 02 	sts	0x022A, r24
 738:	90 93 2b 02 	sts	0x022B, r25
    lefts = ADC_Conversion(1);
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 742:	90 93 1f 02 	sts	0x021F, r25
 746:	80 93 1e 02 	sts	0x021E, r24
    centres = ADC_Conversion(2);
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 750:	90 93 27 02 	sts	0x0227, r25
 754:	80 93 26 02 	sts	0x0226, r24
    rights = ADC_Conversion(3);
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 75e:	90 93 1b 02 	sts	0x021B, r25
 762:	80 93 1a 02 	sts	0x021A, r24
    if(lefts > thresh && centres > thresh && rights <= thresh)
 766:	40 91 1e 02 	lds	r20, 0x021E
 76a:	50 91 1f 02 	lds	r21, 0x021F
 76e:	20 91 26 02 	lds	r18, 0x0226
 772:	30 91 27 02 	lds	r19, 0x0227
 776:	47 39       	cpi	r20, 0x97	; 151
 778:	51 05       	cpc	r21, r1
 77a:	68 f0       	brcs	.+26     	; 0x796 <line_follow+0x160>
 77c:	27 39       	cpi	r18, 0x97	; 151
 77e:	31 05       	cpc	r19, r1
 780:	50 f1       	brcs	.+84     	; 0x7d6 <line_follow+0x1a0>
    {
        //        error = error_last;
        node++;
 782:	80 91 20 02 	lds	r24, 0x0220
 786:	90 91 21 02 	lds	r25, 0x0221
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	90 93 21 02 	sts	0x0221, r25
 790:	80 93 20 02 	sts	0x0220, r24
 794:	3d c0       	rjmp	.+122    	; 0x810 <line_follow+0x1da>
    }
    else if(lefts <= thresh && centres > thresh && rights > thresh)
 796:	27 39       	cpi	r18, 0x97	; 151
 798:	31 05       	cpc	r19, r1
 79a:	18 f0       	brcs	.+6      	; 0x7a2 <line_follow+0x16c>
 79c:	87 39       	cpi	r24, 0x97	; 151
 79e:	91 05       	cpc	r25, r1
 7a0:	80 f7       	brcc	.-32     	; 0x782 <line_follow+0x14c>
    else if(lefts > thresh && centres > thresh && rights > thresh)
    {
        //        error = error_last;
        node++;
    }
    else if(lefts < thresh && centres < thresh && rights < thresh)
 7a2:	46 39       	cpi	r20, 0x96	; 150
 7a4:	51 05       	cpc	r21, r1
 7a6:	b9 f0       	breq	.+46     	; 0x7d6 <line_follow+0x1a0>
 7a8:	26 39       	cpi	r18, 0x96	; 150
 7aa:	31 05       	cpc	r19, r1
 7ac:	a0 f4       	brcc	.+40     	; 0x7d6 <line_follow+0x1a0>
 7ae:	86 39       	cpi	r24, 0x96	; 150
 7b0:	91 05       	cpc	r25, r1
 7b2:	88 f4       	brcc	.+34     	; 0x7d6 <line_follow+0x1a0>
    {
        error = error_last;
 7b4:	80 91 2c 02 	lds	r24, 0x022C
 7b8:	90 91 2d 02 	lds	r25, 0x022D
 7bc:	a0 91 2e 02 	lds	r26, 0x022E
 7c0:	b0 91 2f 02 	lds	r27, 0x022F
 7c4:	80 93 28 02 	sts	0x0228, r24
 7c8:	90 93 29 02 	sts	0x0229, r25
 7cc:	a0 93 2a 02 	sts	0x022A, r26
 7d0:	b0 93 2b 02 	sts	0x022B, r27
 7d4:	1d c0       	rjmp	.+58     	; 0x810 <line_follow+0x1da>
    }
    else if(rights > 250 || lefts > 250 || centres > 440)
 7d6:	8b 3f       	cpi	r24, 0xFB	; 251
 7d8:	91 05       	cpc	r25, r1
 7da:	98 f6       	brcc	.-90     	; 0x782 <line_follow+0x14c>
 7dc:	4b 3f       	cpi	r20, 0xFB	; 251
 7de:	51 05       	cpc	r21, r1
 7e0:	80 f6       	brcc	.-96     	; 0x782 <line_follow+0x14c>
 7e2:	29 3b       	cpi	r18, 0xB9	; 185
 7e4:	31 40       	sbci	r19, 0x01	; 1
 7e6:	68 f6       	brcc	.-102    	; 0x782 <line_follow+0x14c>
    {
        node++;
    }
    else
    {
        if(node >= 1)
 7e8:	80 91 20 02 	lds	r24, 0x0220
 7ec:	90 91 21 02 	lds	r25, 0x0221
 7f0:	18 16       	cp	r1, r24
 7f2:	19 06       	cpc	r1, r25
 7f4:	6c f4       	brge	.+26     	; 0x810 <line_follow+0x1da>
        {
            node_detect ++;
 7f6:	80 91 3a 02 	lds	r24, 0x023A
 7fa:	90 91 3b 02 	lds	r25, 0x023B
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	90 93 3b 02 	sts	0x023B, r25
 804:	80 93 3a 02 	sts	0x023A, r24
            node = 0;
 808:	10 92 21 02 	sts	0x0221, r1
 80c:	10 92 20 02 	sts	0x0220, r1
            //            _delay_ms(100);
        }
    }
    
    
    P = (int)error * kp;
 810:	c0 90 28 02 	lds	r12, 0x0228
 814:	d0 90 29 02 	lds	r13, 0x0229
 818:	e0 90 2a 02 	lds	r14, 0x022A
 81c:	f0 90 2b 02 	lds	r15, 0x022B
 820:	c7 01       	movw	r24, r14
 822:	b6 01       	movw	r22, r12
 824:	0e 94 93 05 	call	0xb26	; 0xb26 <__fixsfsi>
 828:	2a ef       	ldi	r18, 0xFA	; 250
 82a:	26 9f       	mul	r18, r22
 82c:	e0 01       	movw	r28, r0
 82e:	27 9f       	mul	r18, r23
 830:	d0 0d       	add	r29, r0
 832:	11 24       	eor	r1, r1
 834:	d0 93 3d 02 	sts	0x023D, r29
 838:	c0 93 3c 02 	sts	0x023C, r28
    I += error * ki;
 83c:	60 91 32 02 	lds	r22, 0x0232
 840:	70 91 33 02 	lds	r23, 0x0233
 844:	88 27       	eor	r24, r24
 846:	77 fd       	sbrc	r23, 7
 848:	80 95       	com	r24
 84a:	98 2f       	mov	r25, r24
 84c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
 850:	4b 01       	movw	r8, r22
 852:	5c 01       	movw	r10, r24
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	5f e3       	ldi	r21, 0x3F	; 63
 85c:	c7 01       	movw	r24, r14
 85e:	b6 01       	movw	r22, r12
 860:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
 864:	9b 01       	movw	r18, r22
 866:	ac 01       	movw	r20, r24
 868:	c5 01       	movw	r24, r10
 86a:	b4 01       	movw	r22, r8
 86c:	0e 94 c7 04 	call	0x98e	; 0x98e <__addsf3>
 870:	0e 94 93 05 	call	0xb26	; 0xb26 <__fixsfsi>
 874:	4b 01       	movw	r8, r22
 876:	5c 01       	movw	r10, r24
 878:	70 93 33 02 	sts	0x0233, r23
 87c:	60 93 32 02 	sts	0x0232, r22
    D = (int)((error - error_last) * kd);
 880:	20 91 2c 02 	lds	r18, 0x022C
 884:	30 91 2d 02 	lds	r19, 0x022D
 888:	40 91 2e 02 	lds	r20, 0x022E
 88c:	50 91 2f 02 	lds	r21, 0x022F
 890:	c7 01       	movw	r24, r14
 892:	b6 01       	movw	r22, r12
 894:	0e 94 c6 04 	call	0x98c	; 0x98c <__subsf3>
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	4a e7       	ldi	r20, 0x7A	; 122
 89e:	53 e4       	ldi	r21, 0x43	; 67
 8a0:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
 8a4:	0e 94 93 05 	call	0xb26	; 0xb26 <__fixsfsi>
 8a8:	2b 01       	movw	r4, r22
 8aa:	3c 01       	movw	r6, r24
 8ac:	70 93 19 02 	sts	0x0219, r23
 8b0:	60 93 18 02 	sts	0x0218, r22
    vel_l = limit_vel(base_pwm + P + I + D);
 8b4:	ce 01       	movw	r24, r28
 8b6:	84 52       	subi	r24, 0x24	; 36
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	88 0d       	add	r24, r8
 8bc:	99 1d       	adc	r25, r9
 8be:	84 0d       	add	r24, r4
 8c0:	95 1d       	adc	r25, r5
 8c2:	0e 94 2b 02 	call	0x456	; 0x456 <limit_vel>
 8c6:	8c 01       	movw	r16, r24
 8c8:	bc 01       	movw	r22, r24
 8ca:	88 27       	eor	r24, r24
 8cc:	77 fd       	sbrc	r23, 7
 8ce:	80 95       	com	r24
 8d0:	98 2f       	mov	r25, r24
 8d2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
 8d6:	60 93 06 02 	sts	0x0206, r22
 8da:	70 93 07 02 	sts	0x0207, r23
 8de:	80 93 08 02 	sts	0x0208, r24
 8e2:	90 93 09 02 	sts	0x0209, r25
    vel_r = limit_vel(base_pwm - P - I - D);
 8e6:	8c ed       	ldi	r24, 0xDC	; 220
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	8c 1b       	sub	r24, r28
 8ec:	9d 0b       	sbc	r25, r29
 8ee:	88 19       	sub	r24, r8
 8f0:	99 09       	sbc	r25, r9
 8f2:	84 19       	sub	r24, r4
 8f4:	95 09       	sbc	r25, r5
 8f6:	0e 94 2b 02 	call	0x456	; 0x456 <limit_vel>
 8fa:	ec 01       	movw	r28, r24
 8fc:	bc 01       	movw	r22, r24
 8fe:	88 27       	eor	r24, r24
 900:	77 fd       	sbrc	r23, 7
 902:	80 95       	com	r24
 904:	98 2f       	mov	r25, r24
 906:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
 90a:	60 93 02 02 	sts	0x0202, r22
 90e:	70 93 03 02 	sts	0x0203, r23
 912:	80 93 04 02 	sts	0x0204, r24
 916:	90 93 05 02 	sts	0x0205, r25
    error_last = error;
 91a:	c0 92 2c 02 	sts	0x022C, r12
 91e:	d0 92 2d 02 	sts	0x022D, r13
 922:	e0 92 2e 02 	sts	0x022E, r14
 926:	f0 92 2f 02 	sts	0x022F, r15
    velocity(vel_l, vel_r);
 92a:	be 01       	movw	r22, r28
 92c:	c8 01       	movw	r24, r16
 92e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <velocity>
    progress_task();
    
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	1f 91       	pop	r17
 938:	0f 91       	pop	r16
 93a:	ff 90       	pop	r15
 93c:	ef 90       	pop	r14
 93e:	df 90       	pop	r13
 940:	cf 90       	pop	r12
 942:	bf 90       	pop	r11
 944:	af 90       	pop	r10
 946:	9f 90       	pop	r9
 948:	8f 90       	pop	r8
 94a:	7f 90       	pop	r7
 94c:	6f 90       	pop	r6
 94e:	5f 90       	pop	r5
 950:	4f 90       	pop	r4
    D = (int)((error - error_last) * kd);
    vel_l = limit_vel(base_pwm + P + I + D);
    vel_r = limit_vel(base_pwm - P - I - D);
    error_last = error;
    velocity(vel_l, vel_r);
    progress_task();
 952:	0c 94 bf 02 	jmp	0x57e	; 0x57e <progress_task>

00000956 <main>:
//    vel_r = base_pwm - P;
//    velocity(vel_l,vel_r);
//}

int main(void) {
    init_devices();
 956:	0e 94 12 03 	call	0x624	; 0x624 <init_devices>
    rgb_init();
 95a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <rgb_init>
 95e:	2f ef       	ldi	r18, 0xFF	; 255
 960:	87 ea       	ldi	r24, 0xA7	; 167
 962:	91 e6       	ldi	r25, 0x61	; 97
 964:	21 50       	subi	r18, 0x01	; 1
 966:	80 40       	sbci	r24, 0x00	; 0
 968:	90 40       	sbci	r25, 0x00	; 0
 96a:	e1 f7       	brne	.-8      	; 0x964 <main+0xe>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <main+0x18>
 96e:	00 00       	nop
//       lcd_set_4bit();
//        lcd_init();
    _delay_ms(2000);
    while (1) {
                sharp_ir = ADC_Conversion(0);
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	0e 94 38 02 	call	0x470	; 0x470 <ADC_Conversion>
 976:	90 93 35 02 	sts	0x0235, r25
 97a:	80 93 34 02 	sts	0x0234, r24
        //        }
        //forward();
        
        
        //line_follow();
        velocity(255,255);
 97e:	6f ef       	ldi	r22, 0xFF	; 255
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <velocity>
 98a:	f2 cf       	rjmp	.-28     	; 0x970 <main+0x1a>

0000098c <__subsf3>:
 98c:	50 58       	subi	r21, 0x80	; 128

0000098e <__addsf3>:
 98e:	bb 27       	eor	r27, r27
 990:	aa 27       	eor	r26, r26
 992:	0e d0       	rcall	.+28     	; 0x9b0 <__addsf3x>
 994:	4d c1       	rjmp	.+666    	; 0xc30 <__fp_round>
 996:	3e d1       	rcall	.+636    	; 0xc14 <__fp_pscA>
 998:	30 f0       	brcs	.+12     	; 0x9a6 <__addsf3+0x18>
 99a:	43 d1       	rcall	.+646    	; 0xc22 <__fp_pscB>
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__addsf3+0x18>
 99e:	31 f4       	brne	.+12     	; 0x9ac <__addsf3+0x1e>
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__addsf3+0x1a>
 9a4:	1e f4       	brtc	.+6      	; 0x9ac <__addsf3+0x1e>
 9a6:	33 c1       	rjmp	.+614    	; 0xc0e <__fp_nan>
 9a8:	0e f4       	brtc	.+2      	; 0x9ac <__addsf3+0x1e>
 9aa:	e0 95       	com	r30
 9ac:	e7 fb       	bst	r30, 7
 9ae:	29 c1       	rjmp	.+594    	; 0xc02 <__fp_inf>

000009b0 <__addsf3x>:
 9b0:	e9 2f       	mov	r30, r25
 9b2:	4f d1       	rcall	.+670    	; 0xc52 <__fp_split3>
 9b4:	80 f3       	brcs	.-32     	; 0x996 <__addsf3+0x8>
 9b6:	ba 17       	cp	r27, r26
 9b8:	62 07       	cpc	r22, r18
 9ba:	73 07       	cpc	r23, r19
 9bc:	84 07       	cpc	r24, r20
 9be:	95 07       	cpc	r25, r21
 9c0:	18 f0       	brcs	.+6      	; 0x9c8 <__addsf3x+0x18>
 9c2:	71 f4       	brne	.+28     	; 0x9e0 <__addsf3x+0x30>
 9c4:	9e f5       	brtc	.+102    	; 0xa2c <__addsf3x+0x7c>
 9c6:	67 c1       	rjmp	.+718    	; 0xc96 <__fp_zero>
 9c8:	0e f4       	brtc	.+2      	; 0x9cc <__addsf3x+0x1c>
 9ca:	e0 95       	com	r30
 9cc:	0b 2e       	mov	r0, r27
 9ce:	ba 2f       	mov	r27, r26
 9d0:	a0 2d       	mov	r26, r0
 9d2:	0b 01       	movw	r0, r22
 9d4:	b9 01       	movw	r22, r18
 9d6:	90 01       	movw	r18, r0
 9d8:	0c 01       	movw	r0, r24
 9da:	ca 01       	movw	r24, r20
 9dc:	a0 01       	movw	r20, r0
 9de:	11 24       	eor	r1, r1
 9e0:	ff 27       	eor	r31, r31
 9e2:	59 1b       	sub	r21, r25
 9e4:	99 f0       	breq	.+38     	; 0xa0c <__addsf3x+0x5c>
 9e6:	59 3f       	cpi	r21, 0xF9	; 249
 9e8:	50 f4       	brcc	.+20     	; 0x9fe <__addsf3x+0x4e>
 9ea:	50 3e       	cpi	r21, 0xE0	; 224
 9ec:	68 f1       	brcs	.+90     	; 0xa48 <__addsf3x+0x98>
 9ee:	1a 16       	cp	r1, r26
 9f0:	f0 40       	sbci	r31, 0x00	; 0
 9f2:	a2 2f       	mov	r26, r18
 9f4:	23 2f       	mov	r18, r19
 9f6:	34 2f       	mov	r19, r20
 9f8:	44 27       	eor	r20, r20
 9fa:	58 5f       	subi	r21, 0xF8	; 248
 9fc:	f3 cf       	rjmp	.-26     	; 0x9e4 <__addsf3x+0x34>
 9fe:	46 95       	lsr	r20
 a00:	37 95       	ror	r19
 a02:	27 95       	ror	r18
 a04:	a7 95       	ror	r26
 a06:	f0 40       	sbci	r31, 0x00	; 0
 a08:	53 95       	inc	r21
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__addsf3x+0x4e>
 a0c:	7e f4       	brtc	.+30     	; 0xa2c <__addsf3x+0x7c>
 a0e:	1f 16       	cp	r1, r31
 a10:	ba 0b       	sbc	r27, r26
 a12:	62 0b       	sbc	r22, r18
 a14:	73 0b       	sbc	r23, r19
 a16:	84 0b       	sbc	r24, r20
 a18:	ba f0       	brmi	.+46     	; 0xa48 <__addsf3x+0x98>
 a1a:	91 50       	subi	r25, 0x01	; 1
 a1c:	a1 f0       	breq	.+40     	; 0xa46 <__addsf3x+0x96>
 a1e:	ff 0f       	add	r31, r31
 a20:	bb 1f       	adc	r27, r27
 a22:	66 1f       	adc	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	c2 f7       	brpl	.-16     	; 0xa1a <__addsf3x+0x6a>
 a2a:	0e c0       	rjmp	.+28     	; 0xa48 <__addsf3x+0x98>
 a2c:	ba 0f       	add	r27, r26
 a2e:	62 1f       	adc	r22, r18
 a30:	73 1f       	adc	r23, r19
 a32:	84 1f       	adc	r24, r20
 a34:	48 f4       	brcc	.+18     	; 0xa48 <__addsf3x+0x98>
 a36:	87 95       	ror	r24
 a38:	77 95       	ror	r23
 a3a:	67 95       	ror	r22
 a3c:	b7 95       	ror	r27
 a3e:	f7 95       	ror	r31
 a40:	9e 3f       	cpi	r25, 0xFE	; 254
 a42:	08 f0       	brcs	.+2      	; 0xa46 <__addsf3x+0x96>
 a44:	b3 cf       	rjmp	.-154    	; 0x9ac <__addsf3+0x1e>
 a46:	93 95       	inc	r25
 a48:	88 0f       	add	r24, r24
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <__addsf3x+0x9e>
 a4c:	99 27       	eor	r25, r25
 a4e:	ee 0f       	add	r30, r30
 a50:	97 95       	ror	r25
 a52:	87 95       	ror	r24
 a54:	08 95       	ret

00000a56 <__divsf3>:
 a56:	0c d0       	rcall	.+24     	; 0xa70 <__divsf3x>
 a58:	eb c0       	rjmp	.+470    	; 0xc30 <__fp_round>
 a5a:	e3 d0       	rcall	.+454    	; 0xc22 <__fp_pscB>
 a5c:	40 f0       	brcs	.+16     	; 0xa6e <__divsf3+0x18>
 a5e:	da d0       	rcall	.+436    	; 0xc14 <__fp_pscA>
 a60:	30 f0       	brcs	.+12     	; 0xa6e <__divsf3+0x18>
 a62:	21 f4       	brne	.+8      	; 0xa6c <__divsf3+0x16>
 a64:	5f 3f       	cpi	r21, 0xFF	; 255
 a66:	19 f0       	breq	.+6      	; 0xa6e <__divsf3+0x18>
 a68:	cc c0       	rjmp	.+408    	; 0xc02 <__fp_inf>
 a6a:	51 11       	cpse	r21, r1
 a6c:	15 c1       	rjmp	.+554    	; 0xc98 <__fp_szero>
 a6e:	cf c0       	rjmp	.+414    	; 0xc0e <__fp_nan>

00000a70 <__divsf3x>:
 a70:	f0 d0       	rcall	.+480    	; 0xc52 <__fp_split3>
 a72:	98 f3       	brcs	.-26     	; 0xa5a <__divsf3+0x4>

00000a74 <__divsf3_pse>:
 a74:	99 23       	and	r25, r25
 a76:	c9 f3       	breq	.-14     	; 0xa6a <__divsf3+0x14>
 a78:	55 23       	and	r21, r21
 a7a:	b1 f3       	breq	.-20     	; 0xa68 <__divsf3+0x12>
 a7c:	95 1b       	sub	r25, r21
 a7e:	55 0b       	sbc	r21, r21
 a80:	bb 27       	eor	r27, r27
 a82:	aa 27       	eor	r26, r26
 a84:	62 17       	cp	r22, r18
 a86:	73 07       	cpc	r23, r19
 a88:	84 07       	cpc	r24, r20
 a8a:	38 f0       	brcs	.+14     	; 0xa9a <__divsf3_pse+0x26>
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	5f 4f       	sbci	r21, 0xFF	; 255
 a90:	22 0f       	add	r18, r18
 a92:	33 1f       	adc	r19, r19
 a94:	44 1f       	adc	r20, r20
 a96:	aa 1f       	adc	r26, r26
 a98:	a9 f3       	breq	.-22     	; 0xa84 <__divsf3_pse+0x10>
 a9a:	33 d0       	rcall	.+102    	; 0xb02 <__divsf3_pse+0x8e>
 a9c:	0e 2e       	mov	r0, r30
 a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x3a>
 aa0:	e0 e8       	ldi	r30, 0x80	; 128
 aa2:	30 d0       	rcall	.+96     	; 0xb04 <__divsf3_pse+0x90>
 aa4:	91 50       	subi	r25, 0x01	; 1
 aa6:	50 40       	sbci	r21, 0x00	; 0
 aa8:	e6 95       	lsr	r30
 aaa:	00 1c       	adc	r0, r0
 aac:	ca f7       	brpl	.-14     	; 0xaa0 <__divsf3_pse+0x2c>
 aae:	29 d0       	rcall	.+82     	; 0xb02 <__divsf3_pse+0x8e>
 ab0:	fe 2f       	mov	r31, r30
 ab2:	27 d0       	rcall	.+78     	; 0xb02 <__divsf3_pse+0x8e>
 ab4:	66 0f       	add	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	bb 1f       	adc	r27, r27
 abc:	26 17       	cp	r18, r22
 abe:	37 07       	cpc	r19, r23
 ac0:	48 07       	cpc	r20, r24
 ac2:	ab 07       	cpc	r26, r27
 ac4:	b0 e8       	ldi	r27, 0x80	; 128
 ac6:	09 f0       	breq	.+2      	; 0xaca <__divsf3_pse+0x56>
 ac8:	bb 0b       	sbc	r27, r27
 aca:	80 2d       	mov	r24, r0
 acc:	bf 01       	movw	r22, r30
 ace:	ff 27       	eor	r31, r31
 ad0:	93 58       	subi	r25, 0x83	; 131
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255
 ad4:	2a f0       	brmi	.+10     	; 0xae0 <__divsf3_pse+0x6c>
 ad6:	9e 3f       	cpi	r25, 0xFE	; 254
 ad8:	51 05       	cpc	r21, r1
 ada:	68 f0       	brcs	.+26     	; 0xaf6 <__divsf3_pse+0x82>
 adc:	92 c0       	rjmp	.+292    	; 0xc02 <__fp_inf>
 ade:	dc c0       	rjmp	.+440    	; 0xc98 <__fp_szero>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	ec f3       	brlt	.-6      	; 0xade <__divsf3_pse+0x6a>
 ae4:	98 3e       	cpi	r25, 0xE8	; 232
 ae6:	dc f3       	brlt	.-10     	; 0xade <__divsf3_pse+0x6a>
 ae8:	86 95       	lsr	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b7 95       	ror	r27
 af0:	f7 95       	ror	r31
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	c9 f7       	brne	.-14     	; 0xae8 <__divsf3_pse+0x74>
 af6:	88 0f       	add	r24, r24
 af8:	91 1d       	adc	r25, r1
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret
 b02:	e1 e0       	ldi	r30, 0x01	; 1
 b04:	66 0f       	add	r22, r22
 b06:	77 1f       	adc	r23, r23
 b08:	88 1f       	adc	r24, r24
 b0a:	bb 1f       	adc	r27, r27
 b0c:	62 17       	cp	r22, r18
 b0e:	73 07       	cpc	r23, r19
 b10:	84 07       	cpc	r24, r20
 b12:	ba 07       	cpc	r27, r26
 b14:	20 f0       	brcs	.+8      	; 0xb1e <__divsf3_pse+0xaa>
 b16:	62 1b       	sub	r22, r18
 b18:	73 0b       	sbc	r23, r19
 b1a:	84 0b       	sbc	r24, r20
 b1c:	ba 0b       	sbc	r27, r26
 b1e:	ee 1f       	adc	r30, r30
 b20:	88 f7       	brcc	.-30     	; 0xb04 <__divsf3_pse+0x90>
 b22:	e0 95       	com	r30
 b24:	08 95       	ret

00000b26 <__fixsfsi>:
 b26:	04 d0       	rcall	.+8      	; 0xb30 <__fixunssfsi>
 b28:	68 94       	set
 b2a:	b1 11       	cpse	r27, r1
 b2c:	b5 c0       	rjmp	.+362    	; 0xc98 <__fp_szero>
 b2e:	08 95       	ret

00000b30 <__fixunssfsi>:
 b30:	98 d0       	rcall	.+304    	; 0xc62 <__fp_splitA>
 b32:	88 f0       	brcs	.+34     	; 0xb56 <__fixunssfsi+0x26>
 b34:	9f 57       	subi	r25, 0x7F	; 127
 b36:	90 f0       	brcs	.+36     	; 0xb5c <__fixunssfsi+0x2c>
 b38:	b9 2f       	mov	r27, r25
 b3a:	99 27       	eor	r25, r25
 b3c:	b7 51       	subi	r27, 0x17	; 23
 b3e:	a0 f0       	brcs	.+40     	; 0xb68 <__fixunssfsi+0x38>
 b40:	d1 f0       	breq	.+52     	; 0xb76 <__fixunssfsi+0x46>
 b42:	66 0f       	add	r22, r22
 b44:	77 1f       	adc	r23, r23
 b46:	88 1f       	adc	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	1a f0       	brmi	.+6      	; 0xb52 <__fixunssfsi+0x22>
 b4c:	ba 95       	dec	r27
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__fixunssfsi+0x12>
 b50:	12 c0       	rjmp	.+36     	; 0xb76 <__fixunssfsi+0x46>
 b52:	b1 30       	cpi	r27, 0x01	; 1
 b54:	81 f0       	breq	.+32     	; 0xb76 <__fixunssfsi+0x46>
 b56:	9f d0       	rcall	.+318    	; 0xc96 <__fp_zero>
 b58:	b1 e0       	ldi	r27, 0x01	; 1
 b5a:	08 95       	ret
 b5c:	9c c0       	rjmp	.+312    	; 0xc96 <__fp_zero>
 b5e:	67 2f       	mov	r22, r23
 b60:	78 2f       	mov	r23, r24
 b62:	88 27       	eor	r24, r24
 b64:	b8 5f       	subi	r27, 0xF8	; 248
 b66:	39 f0       	breq	.+14     	; 0xb76 <__fixunssfsi+0x46>
 b68:	b9 3f       	cpi	r27, 0xF9	; 249
 b6a:	cc f3       	brlt	.-14     	; 0xb5e <__fixunssfsi+0x2e>
 b6c:	86 95       	lsr	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	b3 95       	inc	r27
 b74:	d9 f7       	brne	.-10     	; 0xb6c <__fixunssfsi+0x3c>
 b76:	3e f4       	brtc	.+14     	; 0xb86 <__fixunssfsi+0x56>
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__floatunsisf>:
 b88:	e8 94       	clt
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <__floatsisf+0x12>

00000b8c <__floatsisf>:
 b8c:	97 fb       	bst	r25, 7
 b8e:	3e f4       	brtc	.+14     	; 0xb9e <__floatsisf+0x12>
 b90:	90 95       	com	r25
 b92:	80 95       	com	r24
 b94:	70 95       	com	r23
 b96:	61 95       	neg	r22
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	99 23       	and	r25, r25
 ba0:	a9 f0       	breq	.+42     	; 0xbcc <__floatsisf+0x40>
 ba2:	f9 2f       	mov	r31, r25
 ba4:	96 e9       	ldi	r25, 0x96	; 150
 ba6:	bb 27       	eor	r27, r27
 ba8:	93 95       	inc	r25
 baa:	f6 95       	lsr	r31
 bac:	87 95       	ror	r24
 bae:	77 95       	ror	r23
 bb0:	67 95       	ror	r22
 bb2:	b7 95       	ror	r27
 bb4:	f1 11       	cpse	r31, r1
 bb6:	f8 cf       	rjmp	.-16     	; 0xba8 <__floatsisf+0x1c>
 bb8:	fa f4       	brpl	.+62     	; 0xbf8 <__floatsisf+0x6c>
 bba:	bb 0f       	add	r27, r27
 bbc:	11 f4       	brne	.+4      	; 0xbc2 <__floatsisf+0x36>
 bbe:	60 ff       	sbrs	r22, 0
 bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <__floatsisf+0x6c>
 bc2:	6f 5f       	subi	r22, 0xFF	; 255
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <__floatsisf+0x6c>
 bcc:	88 23       	and	r24, r24
 bce:	11 f0       	breq	.+4      	; 0xbd4 <__floatsisf+0x48>
 bd0:	96 e9       	ldi	r25, 0x96	; 150
 bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <__floatsisf+0x6a>
 bd4:	77 23       	and	r23, r23
 bd6:	21 f0       	breq	.+8      	; 0xbe0 <__floatsisf+0x54>
 bd8:	9e e8       	ldi	r25, 0x8E	; 142
 bda:	87 2f       	mov	r24, r23
 bdc:	76 2f       	mov	r23, r22
 bde:	05 c0       	rjmp	.+10     	; 0xbea <__floatsisf+0x5e>
 be0:	66 23       	and	r22, r22
 be2:	71 f0       	breq	.+28     	; 0xc00 <__floatsisf+0x74>
 be4:	96 e8       	ldi	r25, 0x86	; 134
 be6:	86 2f       	mov	r24, r22
 be8:	70 e0       	ldi	r23, 0x00	; 0
 bea:	60 e0       	ldi	r22, 0x00	; 0
 bec:	2a f0       	brmi	.+10     	; 0xbf8 <__floatsisf+0x6c>
 bee:	9a 95       	dec	r25
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	da f7       	brpl	.-10     	; 0xbee <__floatsisf+0x62>
 bf8:	88 0f       	add	r24, r24
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__fp_inf>:
 c02:	97 f9       	bld	r25, 7
 c04:	9f 67       	ori	r25, 0x7F	; 127
 c06:	80 e8       	ldi	r24, 0x80	; 128
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	60 e0       	ldi	r22, 0x00	; 0
 c0c:	08 95       	ret

00000c0e <__fp_nan>:
 c0e:	9f ef       	ldi	r25, 0xFF	; 255
 c10:	80 ec       	ldi	r24, 0xC0	; 192
 c12:	08 95       	ret

00000c14 <__fp_pscA>:
 c14:	00 24       	eor	r0, r0
 c16:	0a 94       	dec	r0
 c18:	16 16       	cp	r1, r22
 c1a:	17 06       	cpc	r1, r23
 c1c:	18 06       	cpc	r1, r24
 c1e:	09 06       	cpc	r0, r25
 c20:	08 95       	ret

00000c22 <__fp_pscB>:
 c22:	00 24       	eor	r0, r0
 c24:	0a 94       	dec	r0
 c26:	12 16       	cp	r1, r18
 c28:	13 06       	cpc	r1, r19
 c2a:	14 06       	cpc	r1, r20
 c2c:	05 06       	cpc	r0, r21
 c2e:	08 95       	ret

00000c30 <__fp_round>:
 c30:	09 2e       	mov	r0, r25
 c32:	03 94       	inc	r0
 c34:	00 0c       	add	r0, r0
 c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0xc>
 c38:	88 23       	and	r24, r24
 c3a:	52 f0       	brmi	.+20     	; 0xc50 <__fp_round+0x20>
 c3c:	bb 0f       	add	r27, r27
 c3e:	40 f4       	brcc	.+16     	; 0xc50 <__fp_round+0x20>
 c40:	bf 2b       	or	r27, r31
 c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0x18>
 c44:	60 ff       	sbrs	r22, 0
 c46:	04 c0       	rjmp	.+8      	; 0xc50 <__fp_round+0x20>
 c48:	6f 5f       	subi	r22, 0xFF	; 255
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	08 95       	ret

00000c52 <__fp_split3>:
 c52:	57 fd       	sbrc	r21, 7
 c54:	90 58       	subi	r25, 0x80	; 128
 c56:	44 0f       	add	r20, r20
 c58:	55 1f       	adc	r21, r21
 c5a:	59 f0       	breq	.+22     	; 0xc72 <__fp_splitA+0x10>
 c5c:	5f 3f       	cpi	r21, 0xFF	; 255
 c5e:	71 f0       	breq	.+28     	; 0xc7c <__fp_splitA+0x1a>
 c60:	47 95       	ror	r20

00000c62 <__fp_splitA>:
 c62:	88 0f       	add	r24, r24
 c64:	97 fb       	bst	r25, 7
 c66:	99 1f       	adc	r25, r25
 c68:	61 f0       	breq	.+24     	; 0xc82 <__fp_splitA+0x20>
 c6a:	9f 3f       	cpi	r25, 0xFF	; 255
 c6c:	79 f0       	breq	.+30     	; 0xc8c <__fp_splitA+0x2a>
 c6e:	87 95       	ror	r24
 c70:	08 95       	ret
 c72:	12 16       	cp	r1, r18
 c74:	13 06       	cpc	r1, r19
 c76:	14 06       	cpc	r1, r20
 c78:	55 1f       	adc	r21, r21
 c7a:	f2 cf       	rjmp	.-28     	; 0xc60 <__fp_split3+0xe>
 c7c:	46 95       	lsr	r20
 c7e:	f1 df       	rcall	.-30     	; 0xc62 <__fp_splitA>
 c80:	08 c0       	rjmp	.+16     	; 0xc92 <__fp_splitA+0x30>
 c82:	16 16       	cp	r1, r22
 c84:	17 06       	cpc	r1, r23
 c86:	18 06       	cpc	r1, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	f1 cf       	rjmp	.-30     	; 0xc6e <__fp_splitA+0xc>
 c8c:	86 95       	lsr	r24
 c8e:	71 05       	cpc	r23, r1
 c90:	61 05       	cpc	r22, r1
 c92:	08 94       	sec
 c94:	08 95       	ret

00000c96 <__fp_zero>:
 c96:	e8 94       	clt

00000c98 <__fp_szero>:
 c98:	bb 27       	eor	r27, r27
 c9a:	66 27       	eor	r22, r22
 c9c:	77 27       	eor	r23, r23
 c9e:	cb 01       	movw	r24, r22
 ca0:	97 f9       	bld	r25, 7
 ca2:	08 95       	ret

00000ca4 <__mulsf3>:
 ca4:	0b d0       	rcall	.+22     	; 0xcbc <__mulsf3x>
 ca6:	c4 cf       	rjmp	.-120    	; 0xc30 <__fp_round>
 ca8:	b5 df       	rcall	.-150    	; 0xc14 <__fp_pscA>
 caa:	28 f0       	brcs	.+10     	; 0xcb6 <__mulsf3+0x12>
 cac:	ba df       	rcall	.-140    	; 0xc22 <__fp_pscB>
 cae:	18 f0       	brcs	.+6      	; 0xcb6 <__mulsf3+0x12>
 cb0:	95 23       	and	r25, r21
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <__mulsf3+0x12>
 cb4:	a6 cf       	rjmp	.-180    	; 0xc02 <__fp_inf>
 cb6:	ab cf       	rjmp	.-170    	; 0xc0e <__fp_nan>
 cb8:	11 24       	eor	r1, r1
 cba:	ee cf       	rjmp	.-36     	; 0xc98 <__fp_szero>

00000cbc <__mulsf3x>:
 cbc:	ca df       	rcall	.-108    	; 0xc52 <__fp_split3>
 cbe:	a0 f3       	brcs	.-24     	; 0xca8 <__mulsf3+0x4>

00000cc0 <__mulsf3_pse>:
 cc0:	95 9f       	mul	r25, r21
 cc2:	d1 f3       	breq	.-12     	; 0xcb8 <__mulsf3+0x14>
 cc4:	95 0f       	add	r25, r21
 cc6:	50 e0       	ldi	r21, 0x00	; 0
 cc8:	55 1f       	adc	r21, r21
 cca:	62 9f       	mul	r22, r18
 ccc:	f0 01       	movw	r30, r0
 cce:	72 9f       	mul	r23, r18
 cd0:	bb 27       	eor	r27, r27
 cd2:	f0 0d       	add	r31, r0
 cd4:	b1 1d       	adc	r27, r1
 cd6:	63 9f       	mul	r22, r19
 cd8:	aa 27       	eor	r26, r26
 cda:	f0 0d       	add	r31, r0
 cdc:	b1 1d       	adc	r27, r1
 cde:	aa 1f       	adc	r26, r26
 ce0:	64 9f       	mul	r22, r20
 ce2:	66 27       	eor	r22, r22
 ce4:	b0 0d       	add	r27, r0
 ce6:	a1 1d       	adc	r26, r1
 ce8:	66 1f       	adc	r22, r22
 cea:	82 9f       	mul	r24, r18
 cec:	22 27       	eor	r18, r18
 cee:	b0 0d       	add	r27, r0
 cf0:	a1 1d       	adc	r26, r1
 cf2:	62 1f       	adc	r22, r18
 cf4:	73 9f       	mul	r23, r19
 cf6:	b0 0d       	add	r27, r0
 cf8:	a1 1d       	adc	r26, r1
 cfa:	62 1f       	adc	r22, r18
 cfc:	83 9f       	mul	r24, r19
 cfe:	a0 0d       	add	r26, r0
 d00:	61 1d       	adc	r22, r1
 d02:	22 1f       	adc	r18, r18
 d04:	74 9f       	mul	r23, r20
 d06:	33 27       	eor	r19, r19
 d08:	a0 0d       	add	r26, r0
 d0a:	61 1d       	adc	r22, r1
 d0c:	23 1f       	adc	r18, r19
 d0e:	84 9f       	mul	r24, r20
 d10:	60 0d       	add	r22, r0
 d12:	21 1d       	adc	r18, r1
 d14:	82 2f       	mov	r24, r18
 d16:	76 2f       	mov	r23, r22
 d18:	6a 2f       	mov	r22, r26
 d1a:	11 24       	eor	r1, r1
 d1c:	9f 57       	subi	r25, 0x7F	; 127
 d1e:	50 40       	sbci	r21, 0x00	; 0
 d20:	8a f0       	brmi	.+34     	; 0xd44 <__mulsf3_pse+0x84>
 d22:	e1 f0       	breq	.+56     	; 0xd5c <__mulsf3_pse+0x9c>
 d24:	88 23       	and	r24, r24
 d26:	4a f0       	brmi	.+18     	; 0xd3a <__mulsf3_pse+0x7a>
 d28:	ee 0f       	add	r30, r30
 d2a:	ff 1f       	adc	r31, r31
 d2c:	bb 1f       	adc	r27, r27
 d2e:	66 1f       	adc	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	91 50       	subi	r25, 0x01	; 1
 d36:	50 40       	sbci	r21, 0x00	; 0
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__mulsf3_pse+0x64>
 d3a:	9e 3f       	cpi	r25, 0xFE	; 254
 d3c:	51 05       	cpc	r21, r1
 d3e:	70 f0       	brcs	.+28     	; 0xd5c <__mulsf3_pse+0x9c>
 d40:	60 cf       	rjmp	.-320    	; 0xc02 <__fp_inf>
 d42:	aa cf       	rjmp	.-172    	; 0xc98 <__fp_szero>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	ec f3       	brlt	.-6      	; 0xd42 <__mulsf3_pse+0x82>
 d48:	98 3e       	cpi	r25, 0xE8	; 232
 d4a:	dc f3       	brlt	.-10     	; 0xd42 <__mulsf3_pse+0x82>
 d4c:	86 95       	lsr	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b7 95       	ror	r27
 d54:	f7 95       	ror	r31
 d56:	e7 95       	ror	r30
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	c1 f7       	brne	.-16     	; 0xd4c <__mulsf3_pse+0x8c>
 d5c:	fe 2b       	or	r31, r30
 d5e:	88 0f       	add	r24, r24
 d60:	91 1d       	adc	r25, r1
 d62:	96 95       	lsr	r25
 d64:	87 95       	ror	r24
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__udivmodhi4>:
 d6a:	aa 1b       	sub	r26, r26
 d6c:	bb 1b       	sub	r27, r27
 d6e:	51 e1       	ldi	r21, 0x11	; 17
 d70:	07 c0       	rjmp	.+14     	; 0xd80 <__udivmodhi4_ep>

00000d72 <__udivmodhi4_loop>:
 d72:	aa 1f       	adc	r26, r26
 d74:	bb 1f       	adc	r27, r27
 d76:	a6 17       	cp	r26, r22
 d78:	b7 07       	cpc	r27, r23
 d7a:	10 f0       	brcs	.+4      	; 0xd80 <__udivmodhi4_ep>
 d7c:	a6 1b       	sub	r26, r22
 d7e:	b7 0b       	sbc	r27, r23

00000d80 <__udivmodhi4_ep>:
 d80:	88 1f       	adc	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	5a 95       	dec	r21
 d86:	a9 f7       	brne	.-22     	; 0xd72 <__udivmodhi4_loop>
 d88:	80 95       	com	r24
 d8a:	90 95       	com	r25
 d8c:	bc 01       	movw	r22, r24
 d8e:	cd 01       	movw	r24, r26
 d90:	08 95       	ret

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
