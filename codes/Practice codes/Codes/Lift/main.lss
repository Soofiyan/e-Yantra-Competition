
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000228  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083b  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d3  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004e  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <lift_up>:
int counter = 0;

void lift_up(void) {
    
    
}
  90:	08 95       	ret

00000092 <lift_down>:
  92:	08 95       	ret

00000094 <motors_up>:
    
    
}

void motors_up(void) {
    PORTD |= ((1<<4) | (1<<6));
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	80 65       	ori	r24, 0x50	; 80
  98:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1<<7);
  9a:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~(1<<5);
  9c:	5d 98       	cbi	0x0b, 5	; 11
}
  9e:	08 95       	ret

000000a0 <motors_down>:

void motors_down(void){
    PORTD |= ((1<<5) | (1<<7));
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	80 6a       	ori	r24, 0xA0	; 160
  a4:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1<<4);
  a6:	5c 98       	cbi	0x0b, 4	; 11
    PORTD &= ~(1<<6);
  a8:	5e 98       	cbi	0x0b, 6	; 11
}
  aa:	08 95       	ret

000000ac <stop>:

void stop(void){
    PORTD &= 0x0F;
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8b b9       	out	0x0b, r24	; 11
}
  b2:	08 95       	ret

000000b4 <port_init>:

void port_init() {
    DDRD |= 0xF0;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	80 6f       	ori	r24, 0xF0	; 240
  b8:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0x00;
  ba:	17 b8       	out	0x07, r1	; 7
    PORTD = 0x00;
  bc:	1b b8       	out	0x0b, r1	; 11
}
  be:	08 95       	ret

000000c0 <main>:
            while(!counter)
            {
                motors_up();
                if(PIND & 0x04 == 0x04)
                {
                    counter = 1;
  c0:	c1 e0       	ldi	r28, 0x01	; 1
  c2:	d0 e0       	ldi	r29, 0x00	; 0
        ir = PINC;
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ir>
        if (((ir & 0x20) != 0x20) && (counter == 0))
  ca:	85 fd       	sbrc	r24, 5
  cc:	29 c0       	rjmp	.+82     	; 0x120 <main+0x60>
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d6:	89 2b       	or	r24, r25
  d8:	c9 f0       	breq	.+50     	; 0x10c <main+0x4c>
                    stop();
                }
            }
        }
        if (((ir & 0x20) != 0x20) && (counter == 1))
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	e9 f4       	brne	.+58     	; 0x120 <main+0x60>
        {
            while((PIND & 0x08) == 0x08)
  e6:	4b 99       	sbic	0x09, 3	; 9
  e8:	25 c0       	rjmp	.+74     	; 0x134 <main+0x74>
            {
                motors_down();
            }
            stop();
  ea:	0e 94 56 00 	call	0xac	; 0xac <stop>
            counter = 0;
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f6:	14 c0       	rjmp	.+40     	; 0x120 <main+0x60>
                motors_up();
  f8:	0e 94 4a 00 	call	0x94	; 0x94 <motors_up>
                if(PIND & 0x04 == 0x04)
  fc:	48 9b       	sbis	0x09, 0	; 9
  fe:	06 c0       	rjmp	.+12     	; 0x10c <main+0x4c>
                    counter = 1;
 100:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <_edata+0x1>
 104:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
                    stop();
 108:	0e 94 56 00 	call	0xac	; 0xac <stop>
            while(!counter)
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 114:	89 2b       	or	r24, r25
 116:	81 f3       	breq	.-32     	; 0xf8 <main+0x38>
        if (((ir & 0x20) != 0x20) && (counter == 1))
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ir>
 11c:	85 ff       	sbrs	r24, 5
 11e:	dd cf       	rjmp	.-70     	; 0xda <main+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x66>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x70>
 130:	00 00       	nop
 132:	c8 cf       	rjmp	.-112    	; 0xc4 <main+0x4>
                motors_down();
 134:	0e 94 50 00 	call	0xa0	; 0xa0 <motors_down>
 138:	d6 cf       	rjmp	.-84     	; 0xe6 <main+0x26>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
