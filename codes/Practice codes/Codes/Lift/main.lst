   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lift_up
  12               	lift_up:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** 
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <avr/io.h>
   5:main.c        **** #include <util/delay.h>
   6:main.c        **** 
   7:main.c        **** uint8_t ir = 0;
   8:main.c        **** int counter = 0;
   9:main.c        **** 
  10:main.c        **** void lift_up(void) {
  15               		.loc 1 10 20 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  11:main.c        ****     
  12:main.c        ****     
  13:main.c        **** }
  21               		.loc 1 13 1 view .LVU1
  22               	/* epilogue start */
  23 0000 0895      		ret
  24               		.cfi_endproc
  25               	.LFE6:
  27               	.global	lift_down
  29               	lift_down:
  30               	.LFB14:
  31               		.cfi_startproc
  32               	/* prologue: function */
  33               	/* frame size = 0 */
  34               	/* stack size = 0 */
  35               	.L__stack_usage = 0
  36               	/* epilogue start */
  37 0002 0895      		ret
  38               		.cfi_endproc
  39               	.LFE14:
  41               	.global	motors_up
  43               	motors_up:
  44               	.LFB8:
  14:main.c        **** 
  15:main.c        **** void lift_down(void) {
  16:main.c        ****     
  17:main.c        ****     
  18:main.c        **** }
  19:main.c        **** 
  20:main.c        **** void motors_up(void) {
  45               		.loc 1 20 22 view -0
  46               		.cfi_startproc
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 0 */
  50               	.L__stack_usage = 0
  21:main.c        ****     PORTD |= ((1<<4) | (1<<6));
  51               		.loc 1 21 5 view .LVU3
  52               		.loc 1 21 11 is_stmt 0 view .LVU4
  53 0004 8BB1      		in r24,0xb
  54 0006 8065      		ori r24,lo8(80)
  55 0008 8BB9      		out 0xb,r24
  22:main.c        ****     PORTD &= ~(1<<7);
  56               		.loc 1 22 5 is_stmt 1 view .LVU5
  57               		.loc 1 22 11 is_stmt 0 view .LVU6
  58 000a 5F98      		cbi 0xb,7
  23:main.c        ****     PORTD &= ~(1<<5);
  59               		.loc 1 23 5 is_stmt 1 view .LVU7
  60               		.loc 1 23 11 is_stmt 0 view .LVU8
  61 000c 5D98      		cbi 0xb,5
  62               	/* epilogue start */
  24:main.c        **** }
  63               		.loc 1 24 1 view .LVU9
  64 000e 0895      		ret
  65               		.cfi_endproc
  66               	.LFE8:
  68               	.global	motors_down
  70               	motors_down:
  71               	.LFB9:
  25:main.c        **** 
  26:main.c        **** void motors_down(void){
  72               		.loc 1 26 23 is_stmt 1 view -0
  73               		.cfi_startproc
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 0 */
  77               	.L__stack_usage = 0
  27:main.c        ****     PORTD |= ((1<<5) | (1<<7));
  78               		.loc 1 27 5 view .LVU11
  79               		.loc 1 27 11 is_stmt 0 view .LVU12
  80 0010 8BB1      		in r24,0xb
  81 0012 806A      		ori r24,lo8(-96)
  82 0014 8BB9      		out 0xb,r24
  28:main.c        ****     PORTD &= ~(1<<4);
  83               		.loc 1 28 5 is_stmt 1 view .LVU13
  84               		.loc 1 28 11 is_stmt 0 view .LVU14
  85 0016 5C98      		cbi 0xb,4
  29:main.c        ****     PORTD &= ~(1<<6);
  86               		.loc 1 29 5 is_stmt 1 view .LVU15
  87               		.loc 1 29 11 is_stmt 0 view .LVU16
  88 0018 5E98      		cbi 0xb,6
  89               	/* epilogue start */
  30:main.c        **** }
  90               		.loc 1 30 1 view .LVU17
  91 001a 0895      		ret
  92               		.cfi_endproc
  93               	.LFE9:
  95               	.global	stop
  97               	stop:
  98               	.LFB10:
  31:main.c        **** 
  32:main.c        **** void stop(void){
  99               		.loc 1 32 16 is_stmt 1 view -0
 100               		.cfi_startproc
 101               	/* prologue: function */
 102               	/* frame size = 0 */
 103               	/* stack size = 0 */
 104               	.L__stack_usage = 0
  33:main.c        ****     PORTD &= 0x0F;
 105               		.loc 1 33 5 view .LVU19
 106               		.loc 1 33 11 is_stmt 0 view .LVU20
 107 001c 8BB1      		in r24,0xb
 108 001e 8F70      		andi r24,lo8(15)
 109 0020 8BB9      		out 0xb,r24
 110               	/* epilogue start */
  34:main.c        **** }
 111               		.loc 1 34 1 view .LVU21
 112 0022 0895      		ret
 113               		.cfi_endproc
 114               	.LFE10:
 116               	.global	port_init
 118               	port_init:
 119               	.LFB11:
  35:main.c        **** 
  36:main.c        **** void port_init() {
 120               		.loc 1 36 18 is_stmt 1 view -0
 121               		.cfi_startproc
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
  37:main.c        ****     DDRD |= 0xF0;
 126               		.loc 1 37 5 view .LVU23
 127               		.loc 1 37 10 is_stmt 0 view .LVU24
 128 0024 8AB1      		in r24,0xa
 129 0026 806F      		ori r24,lo8(-16)
 130 0028 8AB9      		out 0xa,r24
  38:main.c        ****     DDRC = 0x00;
 131               		.loc 1 38 5 is_stmt 1 view .LVU25
 132               		.loc 1 38 10 is_stmt 0 view .LVU26
 133 002a 17B8      		out 0x7,__zero_reg__
  39:main.c        ****     PORTD = 0x00;
 134               		.loc 1 39 5 is_stmt 1 view .LVU27
 135               		.loc 1 39 11 is_stmt 0 view .LVU28
 136 002c 1BB8      		out 0xb,__zero_reg__
 137               	/* epilogue start */
  40:main.c        **** }
 138               		.loc 1 40 1 view .LVU29
 139 002e 0895      		ret
 140               		.cfi_endproc
 141               	.LFE11:
 143               		.section	.text.startup,"ax",@progbits
 144               	.global	main
 146               	main:
 147               	.LFB12:
  41:main.c        **** 
  42:main.c        **** int main(void) {
 148               		.loc 1 42 16 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  43:main.c        ****     while(1){
  44:main.c        ****         ir = PINC;
  45:main.c        ****         if (((ir & 0x20) != 0x20) && (counter == 0))
  46:main.c        ****         {
  47:main.c        ****             while(!counter)
  48:main.c        ****             {
  49:main.c        ****                 motors_up();
  50:main.c        ****                 if(PIND & 0x04 == 0x04)
  51:main.c        ****                 {
  52:main.c        ****                     counter = 1;
 154               		.loc 1 52 29 is_stmt 0 view .LVU31
 155 0000 C1E0      		ldi r28,lo8(1)
 156 0002 D0E0      		ldi r29,0
 157               	.L17:
  43:main.c        ****     while(1){
 158               		.loc 1 43 5 is_stmt 1 view .LVU32
  44:main.c        ****         if (((ir & 0x20) != 0x20) && (counter == 0))
 159               		.loc 1 44 9 view .LVU33
  44:main.c        ****         if (((ir & 0x20) != 0x20) && (counter == 0))
 160               		.loc 1 44 14 is_stmt 0 view .LVU34
 161 0004 86B1      		in r24,0x6
  44:main.c        ****         if (((ir & 0x20) != 0x20) && (counter == 0))
 162               		.loc 1 44 12 view .LVU35
 163 0006 8093 0000 		sts ir,r24
  45:main.c        ****         {
 164               		.loc 1 45 9 is_stmt 1 view .LVU36
  45:main.c        ****         {
 165               		.loc 1 45 12 is_stmt 0 view .LVU37
 166 000a 85FD      		sbrc r24,5
 167 000c 00C0      		rjmp .L9
  45:main.c        ****         {
 168               		.loc 1 45 35 discriminator 1 view .LVU38
 169 000e 8091 0000 		lds r24,counter
 170 0012 9091 0000 		lds r25,counter+1
 171 0016 892B      		or r24,r25
 172 0018 01F0      		breq .L13
 173               	.L15:
  53:main.c        ****                     stop();
  54:main.c        ****                 }
  55:main.c        ****             }
  56:main.c        ****         }
  57:main.c        ****         if (((ir & 0x20) != 0x20) && (counter == 1))
 174               		.loc 1 57 35 view .LVU39
 175 001a 8091 0000 		lds r24,counter
 176 001e 9091 0000 		lds r25,counter+1
 177 0022 0197      		sbiw r24,1
 178 0024 01F4      		brne .L9
 179               	.L11:
  58:main.c        ****         {
  59:main.c        ****             while((PIND & 0x08) == 0x08)
 180               		.loc 1 59 18 view .LVU40
 181 0026 4B99      		sbic 0x9,3
 182 0028 00C0      		rjmp .L16
  60:main.c        ****             {
  61:main.c        ****                 motors_down();
  62:main.c        ****             }
  63:main.c        ****             stop();
 183               		.loc 1 63 13 is_stmt 1 view .LVU41
 184 002a 0E94 0000 		call stop
 185               	.LVL0:
  64:main.c        ****             counter = 0;
 186               		.loc 1 64 13 view .LVU42
 187               		.loc 1 64 21 is_stmt 0 view .LVU43
 188 002e 1092 0000 		sts counter+1,__zero_reg__
 189 0032 1092 0000 		sts counter,__zero_reg__
 190 0036 00C0      		rjmp .L9
 191               	.L14:
  49:main.c        ****                 if(PIND & 0x04 == 0x04)
 192               		.loc 1 49 17 is_stmt 1 view .LVU44
 193 0038 0E94 0000 		call motors_up
 194               	.LVL1:
  50:main.c        ****                 {
 195               		.loc 1 50 17 view .LVU45
  50:main.c        ****                 {
 196               		.loc 1 50 19 is_stmt 0 view .LVU46
 197 003c 489B      		sbis 0x9,0
 198 003e 00C0      		rjmp .L13
  52:main.c        ****                     stop();
 199               		.loc 1 52 21 is_stmt 1 view .LVU47
  52:main.c        ****                     stop();
 200               		.loc 1 52 29 is_stmt 0 view .LVU48
 201 0040 D093 0000 		sts counter+1,r29
 202 0044 C093 0000 		sts counter,r28
  53:main.c        ****                 }
 203               		.loc 1 53 21 is_stmt 1 view .LVU49
 204 0048 0E94 0000 		call stop
 205               	.LVL2:
 206               	.L13:
  47:main.c        ****             {
 207               		.loc 1 47 18 is_stmt 0 view .LVU50
 208 004c 8091 0000 		lds r24,counter
 209 0050 9091 0000 		lds r25,counter+1
 210 0054 892B      		or r24,r25
 211 0056 01F0      		breq .L14
  57:main.c        ****         {
 212               		.loc 1 57 9 is_stmt 1 view .LVU51
  57:main.c        ****         {
 213               		.loc 1 57 12 is_stmt 0 view .LVU52
 214 0058 8091 0000 		lds r24,ir
 215 005c 85FF      		sbrs r24,5
 216 005e 00C0      		rjmp .L15
 217               	.L9:
  65:main.c        ****         }
  66:main.c        ****         _delay_ms(2000);
 218               		.loc 1 66 9 is_stmt 1 view .LVU53
 219               	.LVL3:
 220               	.LBB4:
 221               	.LBI4:
 222               		.file 2 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 223               		.loc 2 166 1 view .LVU54
 224               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	double __tmp ;
 225               		.loc 2 168 2 view .LVU55
 169:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 226               		.loc 2 172 2 view .LVU56
 173:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 227               		.loc 2 173 2 view .LVU57
 174:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 228               		.loc 2 174 2 view .LVU58
 175:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 229               		.loc 2 184 3 view .LVU59
 185:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 230               		.loc 2 187 2 view .LVU60
 231 0060 2FEF      		ldi r18,lo8(6399999)
 232 0062 87EA      		ldi r24,hi8(6399999)
 233 0064 91E6      		ldi r25,hlo8(6399999)
 234 0066 2150      	1:	subi r18,1
 235 0068 8040      		sbci r24,0
 236 006a 9040      		sbci r25,0
 237 006c 01F4      		brne 1b
 238 006e 00C0      		rjmp .
 239 0070 0000      		nop
 240 0072 00C0      		rjmp .L17
 241               	.LVL4:
 242               	.L16:
 243               		.loc 2 187 2 is_stmt 0 view .LVU61
 244               	.LBE5:
 245               	.LBE4:
  61:main.c        ****             }
 246               		.loc 1 61 17 is_stmt 1 view .LVU62
 247 0074 0E94 0000 		call motors_down
 248               	.LVL5:
 249 0078 00C0      		rjmp .L11
 250               		.cfi_endproc
 251               	.LFE12:
 253               	.global	counter
 254               		.section .bss
 257               	counter:
 258 0000 0000      		.zero	2
 259               	.global	ir
 262               	ir:
 263 0002 00        		.zero	1
 264               		.text
 265               	.Letext0:
 266               		.file 3 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:4      *ABS*:000000000000003f __SREG__
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:12     .text:0000000000000000 lift_up
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:29     .text:0000000000000002 lift_down
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:43     .text:0000000000000004 motors_up
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:70     .text:0000000000000010 motors_down
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:97     .text:000000000000001c stop
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:118    .text:0000000000000024 port_init
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:146    .text.startup:0000000000000000 main
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:262    .bss:0000000000000002 ir
/var/folders/h4/v2sx1nv55fbfb9hmgflpp9yc0000gn/T//ccsNGQpL.s:257    .bss:0000000000000000 counter

UNDEFINED SYMBOLS
__do_clear_bss
